#!/bin/sh
#*=====================================================================*/
#*    serrano/prgm/project/hop/3.1.x/configure                         */
#*    -------------------------------------------------------------    */
#*    Author      :  Manuel Serrano                                    */
#*    Creation    :  Sat Jul 31 06:49:37 2004                          */
#*    Last change :  Sun May 22 10:06:38 2016 (serrano)                */
#*    Copyright   :  2004-16 Manuel Serrano                            */
#*    -------------------------------------------------------------    */
#*    HOP autoconfiguration                                            */
#*=====================================================================*/

#*---------------------------------------------------------------------*/
#*    User flags                                                       */
#*---------------------------------------------------------------------*/
prefix=/usr/local

bigloo=bigloo
afile=bglafile
jfile=bgljfile
btags=bgltags
bdepend=bgldepend
cc=
flashcc=/usr/bin/mtasc
fflags="-main -version 9 -cp /usr/share/mtasc/std -cp /usr/share/mtasc/std8 -swf"
backend=native
link=dynamic
unzip=unzip
gzip="GZIP=-9 gzip"
install="install -m a+r,u+r"
jar="jar cfm"
javac=javac

devmode=product
debug=no

bcflags="-O2 -fsharing -L \$(BUILDLIBDIR) -srfi bigloo-compile"
bhflags=
btflags="-gtrace"

bglpcre=required
bglunistring=required

bcflagsdev=""
bcflagsdbg="-copt -g -O2"
bcflagsdbg2="-g -cg"
bcflagspmem="-pmem -O2 -fno-user-inlining"
bcflagspmem2="-pmem2 -fno-user-inlining"
bcflagsopt="-unsafe -O3"
bcflagsprofile="-O3 -pg -L \$(BUILDLIBDIR)"

bcflagsrts="-unsafe -safee"
bscm2jsflags="-unsafe"
bhopcflags=""

blflags="-copt \$(CPICFLAGS) -L \$(BUILDLIBDIR) -srfi bigloo-compile"

mimetypes=/etc/mime.types
jsmimetype="application/x-javascript"
cssmimetype="text/css"

libraries="hop hopwidget web hopscheme scheme2js multimedia sqlite js2scheme hopscript nodejs"
bglcloselibs="web multimedia"
bglextracloselibs=

closure=

#*---------------------------------------------------------------------*/
#*    Private variables                                                */
#*---------------------------------------------------------------------*/
version="3.1.0"
devel=pre

hopc=$PWD/bin/hopc
hop=$PWD/bin/hop
bglcpp=$PWD/scheme2js/runtime/bglcpp

branch="`echo $version | sed 's/[0-9][0-9]*$/x/'`"
date=`date +"%d %B %Y"`

url="http://hop.inria.fr"

etcdir=$prefix/etc
bindir=$prefix/bin
libdir=$prefix/lib
sharedir=$prefix/share/hop
mansec=man1
mandir=$prefix/man/$mansec
webletsdir=
contribsdir=$prefix/share/hop/contribs
docdir=$prefix/share/doc/hop
buildlibdir=$PWD/lib/hop/$version
buildsharedir=$PWD/share
distribdir=$HOME/prgm/distrib
distribdir=$HOME/prgm/project/hop/repository
buildbindir=$PWD/bin

buildspecific=
installspecific=

bigloorequired=4.3a
bigloourl=http://www-sop.inria.fr/indes/fp/Bigloo

svn=ssh://hop@hop.inria.fr/hop

if [ "$USER " = "serrano " ]; then
  distribdir=$HOME/prgm/distrib
  repodir=$HOME/prgm/project/hop/repository
else
  distribdir=.
  repodir=.
fi

# User controlled optional features
ssl=""
locevent="true"
threads=""

zeroconf="#f"
zeroconfbe="no"
avahi=""

upnp=""

uv=""

hopsrfis=""

rts="hop-dom.js hop-event.js hop-serialize.js hop-request.js hop-lib.js hopscheme.js hop-require.js hop-boot.js hop-react.js"

bglfail=false;

hopservicebase="/hop"
hopjssanssuffix='"hop"'
hopjsfiles='"hop-autoconf.js" "runtime.js" "hop-boot.js" "hop-react.js"'
 
for p in $rts; do
  hopjsfiles="$hopjsfiles \"$p\""; 
done

arch=noarch
mach=
felix=

# Argument parsing
while : ; do
  case $1 in
    "")
      break;;

    --prefix=*)
      prefix="`echo $1 | sed 's/^[^=]*=//'`";
      bindir=$prefix/bin;
      libdir=$prefix/lib;
      sharedir=$prefix/share/hop;
      mandir=$prefix/man/$mansec;
      etcdir=$prefix/etc;
      contribsdir=$prefix/share/hop/contribs
      docdir=$prefix/share/doc/hop;;

    --etcdir=*)
      etcdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --bindir=*)
      bindir="`echo $1 | sed 's/^[^=]*=//'`";;

    --libdir=*)
      libdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --sharedir=*)
      sharedir="`echo $1 | sed 's/^[^=]*=//'`";;

    --mandir=*)
      mandir="`echo $1 | sed 's/^[^=]*=//'`"/$mansec;;

    --webletsdir=*)
      webletsdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --contribsdir=*)
      contribsdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --docdir=*)
      docdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --distribdir=*)
      distribdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --build-bindir=*)
      buildbindir="`echo $1 | sed 's/^[^=]*=//'`";
      bigloo=$buildbindir/bigloo;
      afile=$buildbindir/bglafile;
      jfile=$buildbindir/bgljfile;
      hop=$buildbindir/hop;
      hopc=$buildbindir/hopc;;
      
    --mimetypes=*)
      mimetypes="`echo $1 | sed 's/^[^=]*=//'`";;

    --jsmimetype=*)
      jsmimetype="`echo $1 | sed 's/^[^=]*=//'`";;

    --cssmimetype=*)
      cssmimetype="`echo $1 | sed 's/^[^=]*=//'`";;

    --hop=*)
      hop="`echo $1 | sed 's/^[^=]*=//'`";;
      
    --hopc=*)
      hopc="`echo $1 | sed 's/^[^=]*=//'`";;
      
    --bigloo=*)
      bigloo="`echo $1 | sed 's/^[^=]*=//'`";;

    --bigloo-pcre=*)
      bglpcre="`echo $1 | sed 's/^[^=]*=//'`";;

    --bigloo-unistring=*)
      bglunistring="`echo $1 | sed 's/^[^=]*=//'`";;

    --bglafile=*)
      afile="`echo $1 | sed 's/^[^=]*=//'`";;

    --bigloolibdir=*)
      bigloolibdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --bigloobindir=*)
      bigloobindir="`echo $1 | sed 's/^[^=]*=//'`";;

    --backend=*)
      backend="`echo $1 | sed 's/^[^=]*=//'`";;

    --link=*)
      link="`echo $1 | sed 's/^[^=]*=//'`";;

    --afile=*)
      afile="`echo $1 | sed 's/^[^=]*=//'`";;

    --btags=*)
      btags="`echo $1 | sed 's/^[^=]*=//'`";;

    --bdepend=*)
      bdepend="`echo $1 | sed 's/^[^=]*=//'`";;

    --cc=*)
      cc="`echo $1 | sed 's/^[^=]*=//'`";;

    --bcflags=*)
      bcflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --bldflags=*)
      bldflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --extra-bcflags=*)
      bcflags="$bcflags $(echo $1 | sed 's/^[-a-z]*=//')";;

    --blflags=*)
      blflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --bhflags=*)
      bhflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --bcflagsdev=*)
      bcflagsdev="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --ccflags=*)
      ccflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --devel)
      devmode="devel";
      bcflagsrts=;
      bcflagsdev=-cg;
      bscm2jsflags=;;

    --debug)
      devmode="debug";
      debug=yes;
      bcflagsrts=-g;
      bscm2jsflags=-g;
      bhopcflags=-g;
      bcflags="$bcflags $bcflagsdbg";;

    --debug2)
      devmode="debug2";
      debug=yes;
      bcflagsrts=-g;
      bscm2jsflags=-g;
      bhopcflags=-g;
      bcflags="$bcflags $bcflagsdbg2";;

    --pmem)
      devmode="pmem";
      debug=no;
      bscm2jsflags=-pmem;
      bcflags="$bcflags $bcflagspmem";;

    --pmem2)
      devmode="pmem2";
      debug=no;
      bscm2jsflags=-pmem2;
      bcflags="$bcflags $bcflagspmem2";;

    --optimize)
      bcflags="$bcflags $bcflagsopt";;

    --profile)
      bscm2jsflags=;
      bcflags="$bcflagsprofile";;

    --enable-ssl)
      ssl=yes;;

    --disable-ssl)
      ssl=no;;

    --enable-avahi)
      avahi=yes;;

    --disable-avahi)
      avahi=no;;

    --enable-upnp)
      upnp=yes;;

    --disable-upnp)
      upnp=no;;

    --disable-libuv)
      uv=no;
      libuv=no;;

    --gzip=*)
      gzip="`echo $1 | sed 's/^[^=]*=//'`";;

    --install=*)
      install="`echo $1 | sed 's/^[^=]*=//'`";;

    --enable-locevent)
      locevent=true;;

    --disable-locevent)
      locevent=false;;

    --enable-threads)
      threads=yes;;

    --disable-threads)
      threads=no;;

    --srfi=*)
      hopsrfis="$hopsrfis `echo $1 | sed 's/^[^=]*=//'`";;

    --library=*)
      libraries="$libraries `echo $1 | sed 's/^[^=]*=//'`";;

    --macosx-bundle|--macosx)
      bcflags="$bcflags -copt -I../arch/macosx";
      arch=macosx;;

    --android)
      buildspecific=build-android;
      installspecific=install-android;
      arch=android;;

    --apache-felix=*)
      felix="`echo $1 | sed 's/^[^=]*=//'`";
      link=felix;
      hopsrfis="$hopsrfis boot-from-java"
      ;;

    --closure=*)
      closure="`echo $1 | sed 's/^[^=]*=//'`";
      ;;

    -*)
      echo "*** Configure error, unknown option $1" >&2;
      echo >&2;
      echo "Usage: configure [options]" >&2;
      echo "" >&2;
      echo "Path:" >&2;
      echo "   --prefix=dir............... prefix to HOP install" >&2;
      echo "   --etcdir=dir............... Hop etc directory" >&2;
      echo "   --bindir=dir............... alternative Hop bin directory" >&2;
      echo "   --libdir=dir............... alternative Hop lib directory" >&2;
      echo "   --sharedir=dir............. alternative Hop share directory" >&2;
      echo "   --mandir=dir............... alternative Hop man directory" >&2;
      echo "   --webletsdir=dir........... alternative Hop weblets directory" >&2;
      echo "   --contribsdir=dir.......... alternative Hop contribs directory" >&2;
      echo "   --docdir=dir............... alternative Hop doc directory" >&2;
      echo "" >&2;
      echo "Misc:" >&2;
      echo "   --mimetypes=file........... default mime.types file" >&2;
      echo "   --jsmimetype=type.......... default 'text/javascript'" >&2;
      echo "   --cssmimetype=type......... default 'text/css'" >&2;
      echo "" >&2;
      echo "Features:" >&2;
      echo "   --enable-ssl............... Enables SSL support (default)" >&2;
      echo "   --disable-ssl.............. Disables SSL support" >&2;
      echo "   --enable-locevent.......... Enables location event support (default)" >&2;
      echo "   --disable-locevent......... Disables location event support" >&2;
      echo "   --enable-threads........... Enables multi-threading support (default)" >&2;
      echo "   --disable-threads.......... Disables multi-threading support" >&2;
      echo "   --enable-avahi............. Enables AVAHI support (default)" >&2;
      echo "   --disable-avahi............ Disables AVAHI support" >&2;
      echo "   --enable-upnp.............. Enables UPNP support (default)" >&2;
      echo "   --disable-upnp............. Disables UPNP support" >&2;
      echo "   --disable-libuv............ Disables LIBUV support" >&2;
      echo "   --library=lib.............. Add extra lib to Hop" >&2;
      echo "   --srfi=sym................. Activates this srfi (during compilation and runtime)" >&2;
      echo "" >&2;
      echo "Cross compilation and OS dependencies:" >&2;
      echo "   --build-bindir=dir......... Crosss compilers path ($buildbindir)" >&2;
      echo "   --hop=comp................. The Hop binary ($hop)" >&2;
      echo "   --hopc=comp................ The Hopc binary ($hopc)" >&2;
      echo "   --bigloo=comp.............. The Bigloo compiler ($bigloo)" >&2;
      echo "   --bigloobindir=path........ The Bigloo bin-dir path" >&2;
      echo "   --bigloolibdir=path........ The Bigloo lib-dir path" >&2;
      echo "   --bigloo-prce=yes|no....... Enable/disable libunistring" >&2;
      echo "   --bigloo-unistring=yes|no.. Enable/disable pcre" >&2;
      echo "   --backend=backend.......... The execution platform [native,jvm,dotnet]" >&2;
      echo "   --link=method.............. The link method [static,dynamic,library,felix]" >&2;
      echo "   --afile=afile.............. The Bigloo afile tool" >&2;
      echo "   --btags=btags.............. The Bigloo btags tool" >&2;
      echo "   --bdepend=bdepend.......... The Bigloo dependence tool" >&2;
      echo "   --gzip..................... The GNU zipper ($gzip)" >&2;
      echo "   --install.................. The installer ($install)" >&2;
      echo "   --cc=cc.................... The C compiler" >&2;
      echo "   --bcflags=args............. The Bigloo C compilation options" >&2;
      echo "   --bldflags=args............ The Bigloo C link options" >&2;
      echo "   --extra-bcflags=args....... Additional Bigloo compilation options" >&2;
      echo "   --bcflagsdev=args.......... The devel Bigloo options" >&2;
      echo "   --blflags=args............. The link options" >&2;
      echo "   --bhflags=args............. The heap options" >&2;
      echo "   --ccflags=args............. The C compilation options" >&2;
      echo "   --macosx................... Prepares the production of a MacOSX bundle" >&2;
      echo "   --android.................. Prepares the production of an Android apk" >&2;
      echo "   --macosx................... Prepares the production of a MacOSX bundle" >&2;
      echo "   --apache-felix=path........ Path to felix.jar" >&2;
      echo "" >&2;
      echo "Configuration settings:" >&2;
      echo "   --devel.................... Enables devel mode (safe but not debug)" >&2;
      echo "   --debug[2]................. Enables Bigloo debug mode" >&2;
      echo "   --pmem[2].................. Enables memory profiling mode" >&2;
      echo "   --profile.................. Enables Bigloo profiling mode" >&2;
      echo "   --optimize................. Enables Bigloo optimization mode (default)" >&2;
      echo "   --closure=comp............. Path to closure compiler" >&2;
      exit 255;
  esac
  shift
done

# patch the bigloobindir path
if [ "$bigloobindir " = " " -a "$bigloo " != "bigloo " ]; then
  bigloobindir=`dirname $bigloo`;
fi  
    
if [ "$bigloobindir " != " " ]; then
  if [ "$bigloo " = "bigloo " ]; then
    bigloo=$bigloobindir/bigloo
  fi
  if [ "$afile " = "bglafile " ]; then
    afile=$bigloobindir/bglafile
  fi
  if [ "$jfile " = "bgljfile " ]; then
    jfile=$bigloobindir/bgljfile
  fi
  if [ "$btags " = "bgltags " ]; then
    btags=$bigloobindir/bgltags
  fi
  if [ "$bdepend " = "bgldepend " ]; then
    bdepend=$bigloobindir/bgldepend
  fi
fi

#*---------------------------------------------------------------------*/
#*    Versioning                                                       */
#*---------------------------------------------------------------------*/
if [ ! -x .hoprelease ]; then
  cat > .hoprelease <<EOF
#!/bin/sh
major=$version
state=$devel
minor=
EOF
  chmod a+rx .hoprelease
fi

. ./.hoprelease

if [ "$state " != "$devel " ]; then
  state=$devel
  minor=1
  cat > .hoprelease <<EOF
#!/bin/sh
major=$version
state=$devel
minor=1
EOF
  chmod a+rx .hoprelease
fi

#*---------------------------------------------------------------------*/
#*    First check that bigloo exists and is recent enough              */
#*---------------------------------------------------------------------*/
if [ ! -f $bigloo ]; then
   which $bigloo > /dev/null 2> /dev/null
   if [ "$?" != "0" ]; then
      echo "*** ERROR:configure:bigloo. Aborting" >&2
      echo "Can't find bigloo. You need at least version $(bigloorequired)." >&2
      echo "It may be downloaded at:" >&2
      echo "   $bigloourl" >&2
      exit 1;
   fi
fi

bglversion=`$bigloo -q -eval "(exit (display (bigloo-config 'release-number)))"`

$bigloo -q -eval "(exit (if (string>=? (bigloo-config 'release-number) \"$bigloorequired\") 0 1))"

if [ $? != "0" ]; then
  echo "*** ERROR:configure:bigloo. Aborting" >&2
  echo "Your version of Bigloo ($bglversion) is too old. Release" >&2
  echo "   $bigloorequired" >&2
  echo "or more recent is required. It may be downloaded at:" >&2
  echo "   $bigloourl" >&2
  exit 1;
fi

#*---------------------------------------------------------------------*/
#*    Check the backend                                                */
#*---------------------------------------------------------------------*/
case $backend in
  "native")
     break;;
  "jvm")
     etcdir=/resource/etc
     libdir=/resource/lib
     webletsdir=/resource/lib/weblets
     contribsdir=/resource/share/contribs
     docdir=/resource/share/doc/hop
     sharedir=/resource/share
     hopc="java -jar $PWD/bin/hopc.jar"
     hop="java -jar $PWD/bin/hop.jar"
     break;;
  "dotnet")
     break;;
  *)
      echo "*** Configure error, Illegal backend $backend" >&2;
      echo "see configure --help" >&2;
      exit -1;
esac

#*---------------------------------------------------------------------*/
#*    We are now able to set the correct value for cc since we know    */
#*    what Bigloo is.                                                  */
#*---------------------------------------------------------------------*/
if [ "$bigloolibdir " = " " ]; then
  bigloolibdir=`$bigloo -q -eval "(begin (print (bigloo-config 'library-directory)) (exit 0))"`
else
  bcflags="$bcflags -lib-dir $bigloolibdir"
fi

if [ "$cc " = " " ]; then
  cc=`$bigloo $bcflags -eval '(begin (print *cc*) (exit 0))'`
else  
  bcflags="$bcflags -cc $cc"
fi

if [ "$ccflags " = " " ]; then
  ccflags=`grep '^CFLAGS=' $bigloolibdir/Makefile.config | sed 's/^[A-Z]*=//'`
  if [ "$debug " = "yes " ]; then
    ccflags=`echo $ccflags | sed 's/[-]O[0-9]//'`
  fi
  ccflags="$ccflags -I$bigloolibdir \$(CPICFLAGS)"
fi

if [ ! -f $bigloolibdir/Makefile.config ]; then
  echo "Bigloo not properly installed, file missing:" >&2;
  echo "  $bigloolibdir/Makefile.config" >&2;
  exit -1;
fi

#*---------------------------------------------------------------------*/
#*    Check that Bigloo compiles and binary runs                       */
#*---------------------------------------------------------------------*/
tmp=`$bigloo -eval '(begin (print (os-tmp)) (exit 0))'`
cat > $tmp/bigloo-test-hop.scm <<EOF
(module test (main main))

(define (main args)
  (exit (-fx 1 (string->integer (cadr args)))))
EOF

$bigloo $tmp/bigloo-test-hop.scm -o $tmp/bigloo-test-hop || exit 1

$tmp/bigloo-test-hop 1 || exit 1

rm -f $tmp/bigloo-test-hop $tmp/bigloo-test-hop.scm $tmp/bigloo-test-hop.o

#*---------------------------------------------------------------------*/
#*    Check the Bigloo required libraries                              */
#*---------------------------------------------------------------------*/
if [ ! -f $bigloolibdir/web.heap ]; then
  echo "*** ERROR:configure:bigloo web." >&2;
  echo "" >&2;
  echo "This error is due to a bad Bigloo installation. It might be that" >&2;
  echo "you have installed Bigloo without the WEB support. Please" >&2;
  echo "check your Bigloo installation." >&2;
  echo "" >&2
  bglfail=true;
fi

if [ ! -f $bigloolibdir/multimedia.heap ]; then
  echo "*** ERROR:configure:bigloo multimedia." >&2;
  echo "" >&2;
  echo "This error is due to a bad Bigloo installation. It might be that" >&2;
  echo "you have installed Bigloo without the MULTIMEDIA support. Please" >&2;
  echo "check your Bigloo installation." >&2;
  echo "" >&2
  bglfail=true;
fi

#*---------------------------------------------------------------------*/
#*    SSL                                                              */
#*---------------------------------------------------------------------*/
if [ "$ssl " = " " ]; then
  if [ ! -f $bigloolibdir/ssl.heap ]; then
    ssl=no
  else
    ssl=yes
  fi
fi

if [ "$ssl" = "yes" ]; then
  if [ ! -f $bigloolibdir/ssl.heap ]; then
    echo "*** ERROR:configure:bigloo ssl." >&2;
    echo "" >&2;
    echo "This error is due to a bad Bigloo installation. It might be that" >&2;
    echo "you have installed Bigloo without the SSL support. Please" >&2;
    echo "check your Bigloo installation, or configure Hop without ssl." >&2;
    echo "" >&2
    bglfail=true;
  fi

  hopsrfis="$hopsrfis enable-ssl"
  libraries="$libraries ssl"
  bglcloselibs="$bglcloselibs ssl"
fi

#*---------------------------------------------------------------------*/
#*    Threads                                                          */
#*---------------------------------------------------------------------*/
if [ "$threads " = " " ]; then
  if [ -f $bigloolibdir/pthread.heap ]; then
    threads=yes
  else
    threads=no
  fi
fi

if [ "$threads" = "yes" ]; then
  if [ ! -f $bigloolibdir/pthread.heap ]; then
    echo "*** ERROR:configure:bigloo pthread." >&2;
    echo "" >&2;
    echo "You have request a multi-threading support but it appears that" >&2;
    echo "the installed Bigloo compiler does not support multi-threading." >&2;
    echo "You must either, configure Hop without multi-threading support" >&2;
    echo "or re-configure and re-install your Bigloo compiler." >&2;
    echo "" >&2
    bglfail=true;
  fi

  hopsrfis="$hopsrfis enable-threads"
  libraries="$libraries pthread"
  bglcloselibs="$bglcloselibs pthread"
else
  if [ "$avahi " = "yes " ]; then
    echo "*** ERROR:configure:bigloo avahi." >&2;
    echo "" >&2;
    echo "Avahi requires threads, either disable avahi (--disable-avahi)" >&2;
    echo "or enable threads (--enable-threads)" >&2;
    echo "" >&2
    bglfail=true;
  else
    avahi=no;
  fi
  if [ "$upnp " = "yes " ]; then
    echo "*** ERROR:configure:bigloo upnp." >&2;
    echo "" >&2;
    echo "Upnp requires threads, either disable upnp (--disable-upnp)" >&2;
    echo "or enable threads (--enable-threads)" >&2;
    echo "" >&2
    bglfail=true;
  else
    upnp=no;
  fi
fi

#*---------------------------------------------------------------------*/
#*    Avahi                                                            */
#*---------------------------------------------------------------------*/
if [ "$avahi " = " " ]; then
  if [ -f $bigloolibdir/avahi.heap ]; then
    avahi=yes
  else
    avahi=no
  fi
fi

if [ "$avahi " = "yes " ]; then
  if [ ! -f $bigloolibdir/avahi.heap ]; then
    echo "*** ERROR:configure:bigloo avahi." >&2;
    echo "" >&2;
    echo "You have request a avahi support but it appears that" >&2;
    echo "the installed Bigloo compiler does not support avahi." >&2;
    echo "You must either, configure Hop without avahi support" >&2;
    echo "or re-configure and re-install your Bigloo compiler." >&2;
    echo "" >&2
    bglfail=true;
  fi

  hopsrfis="$hopsrfis enable-avahi"
  zeroconf="#t"
  zeroconfbe="avahi"
  libraries="$libraries avahi"
  bglcloselibs="$bglcloselibs avahi"
fi

#*---------------------------------------------------------------------*/
#*    Upnp                                                             */
#*---------------------------------------------------------------------*/
if [ "$upnp " = " " ]; then
  if [ -f $bigloolibdir/upnp.heap ]; then
    upnp=yes
  else
    upnp=no
  fi
fi

if [ "$upnp " = "yes " ]; then
  if [ ! -f $bigloolibdir/upnp.heap ]; then
    echo "*** ERROR:configure:bigloo upnp." >&2;
    echo "" >&2;
    echo "You have request a upnp support but it appears that" >&2;
    echo "the installed Bigloo compiler does not support upnp." >&2;
    echo "You must either, configure Hop without upnp support" >&2;
    echo "or re-configure and re-install your Bigloo compiler." >&2;
    echo "" >&2
    bglfail=true;
  fi

  hopsrfis="$hopsrfis enable-upnp"
  libraries="$libraries upnp"
  bglcloselibs="$bglcloselibs upnp"
fi

#*---------------------------------------------------------------------*/
#*    uv                                                               */
#*---------------------------------------------------------------------*/
if [ "$uv " = " " ]; then
  if [ -f $bigloolibdir/libuv.heap ]; then
    uv=yes
  else
    uv=no
  fi
fi

if [ "$uv " = "no " ]; then
  if [ "$libuv " != "no " ]; then
    echo "*** ERROR:configure:bigloo libuv." >&2;
    echo "" >&2;
    echo "Bigloo LIBUV is not installed on your machine." >&2;
    echo "" >&2;
    echo "LIBUV is strongly recommended for better performance. It is then" >&2;
    echo "advised to install LIBUV and re-install Bigloo before compiling Hop." >&2;
    echo "However, if you want to give Hop a try without LIBUV, configure it" >&2;
    echo "with the \"--disable-libuv\" option." >&2;
    echo "" >&2
    bglfail=true;
  fi
else
  hopsrfis="$hopsrfis enable-libuv"
  libraries="$libraries libuv"
  bglcloselibs="$bglcloselibs libuv"
  bglextracloselibs="-luv"
fi

#*---------------------------------------------------------------------*/
#*    unistring                                                        */
#*---------------------------------------------------------------------*/
haveunistring=`$bigloo -q -eval "(exit (display (bigloo-config 'have-unistring)))"`
if [ "$haveunistring " != "#t " -a "$bglunistring " != "no " ]; then
    echo "*** ERROR:configure: your Bigloo setting  does not support \"unistring\"." >&2
    echo "  As a consequence JavaScript locale comparison are not correctly supported." >&2
    echo "  If you known what you are doing and if you don't need string locale " >&2
    echo "  comparison, re-configure Hop with the following option:" >&2
    echo "    ./configure --bigloo-unistring=no ..." >&2
    echo "" >&2
    bglfail=true;
fi

#*---------------------------------------------------------------------*/
#*    pcre                                                             */
#*---------------------------------------------------------------------*/
pcre=`$bigloo -q -eval "(exit (display (bigloo-config 'regexp)))"`

if [ "$pcre " != "pcre " -a "$bglpcre " != "no " ]; then
    echo "*** ERROR:configure: your Bigloo setting  does not support \"pcre\"." >&2
    echo "  As a consequence JavaScript regular expressions are not fully supported." >&2
    echo "  If you known what you are doing and if you don't want compatible regexp" >&2
    echo "  re-configure Hop with the following option:" >&2
    echo "    ./configure --bigloo-pcre=no ..." >&2
    echo "  Otherwise, install pcre and re-configure and re-compile Bigloo first." >&2
    echo "" >&2
    bglfail=true;
fi

#*---------------------------------------------------------------------*/
#*    bgl test completion                                              */
#*---------------------------------------------------------------------*/
if [ "$bglfail " = "true " ]; then
  echo "When re-configuring Bigloo, it might be useful to use the configure option" >&2
  echo "\"--abort-missing\" that will force the Bigloo configuration process to fail" >&2
  echo "as soon as one important Bigloo library is missing." >&2
  exit 1
fi    

#*---------------------------------------------------------------------*/
#*    Then check if bglafile exists this is a good indicator of a      */
#*    correct Bigloo installation.                                     */
#*---------------------------------------------------------------------*/
$afile runtime/*.scm > /dev/null 2> /dev/null

if [ $? != "0" ]; then
  echo "*** ERROR:configure:$afile. Aborting"
  echo ""
  echo "This error is due to a bad Bigloo installation. It might be that"
  echo "you have installed Bigloo but not ran \"ldconfig\" afterward."
  echo "In such a case, binaries produced by Bigloo cannot be executed"
  echo "because the loader cannot find the Bigloo dynamic library."
  exit 1;
fi

#*---------------------------------------------------------------------*/
#*    Jvm zip libs                                                     */
#*---------------------------------------------------------------------*/
jvmziplibs=
jvminits=

#*---------------------------------------------------------------------*/
#*    Weblets dir                                                      */
#*---------------------------------------------------------------------*/
if [ "$webletsdir " = " " ]; then
  webletsdir=$libdir/hop/$version/weblets;
fi

# Hop librairies
for p in scheme2js hopscheme hop hopwidget js2scheme hopscript nodejs; do
  elib="$buildlibdir/$p"_es-$version.zip;
  slib="$buildlibdir/$p"_s-$version.zip;
  jvmziplibs="$elib $slib $jvmziplibs";
done

# Bigloo libraries
for p in web multimedia sqlite ssl calendar mail text; do
  elib="$bigloolibdir/bigloo$p"_es-$bglversion.zip;
  slib="$bigloolibdir/bigloo$p"_s-$bglversion.zip;
  jvmziplibs="$elib $slib $jvmziplibs";
  jvminits="$bigloolibdir/$p"".init $jvminits";
done

#pth
elib="$bigloolibdir/bigloopthread"_es-$bglversion.zip;
slib="$bigloolibdir/bigloopthread"_s-$bglversion.zip;
jvmziplibs="$elib $slib $jvmziplibs";
jvminits="$bigloolibdir/pthread.init $jvminits";

slib="$bigloolibdir/bigloo_s.zip";
jvmziplibs="$slib $jvmziplibs";
jvminits="$bigloolibdir/pthread.init $jvminits";

#*---------------------------------------------------------------------*/
#*    Srfis                                                            */
#*---------------------------------------------------------------------*/
for srfi in $hopsrfis; do
    bcflags="$bcflags -srfi $srfi";
    bhflags="$bhflags -srfi $srfi";
done

#*---------------------------------------------------------------------*/
#*    Apache Felix                                                     */
#*---------------------------------------------------------------------*/
if [ "$felix " != " " ]; then
   if [ ! -f "$felix" ]; then
      echo "*** Configure error, Apache Felix not found in $felix" >&2;
      exit 1;
   fi

   if [ "$backend " != "jvm " ]; then
      echo "*** Configure error, Apache Felix requires the jvm backend" >&2;
      exit 1;
   fi
fi

#*---------------------------------------------------------------------*/
#*    closure (optional)                                               */
#*---------------------------------------------------------------------*/
if [ "$closure " = " " ]; then
  js="function _(){return 1};"
  for p in closure-compiler closure; do
    if [ "`echo \"$js\" | $p`" = "$js" ]; then
      closure=$p
      break;
    fi
  done
fi
      
if [ "$closure " = " " ]; then
  closure=cat
fi
    
#*---------------------------------------------------------------------*/
#*    buildid ...                                                      */
#*---------------------------------------------------------------------*/
buildid=`md5sum hopscript/*.scm js2scheme/*.scm nodejs/*.js | md5sum | sed 's/[ ]*[-]$//'`

#*---------------------------------------------------------------------*/
#*    Create directories                                               */
#*---------------------------------------------------------------------*/
mkdir -p bin
mkdir -p lib
mkdir -p lib/hop
mkdir -p lib/hop/$version

#*---------------------------------------------------------------------*/
#*    Makefile.hopconfig                                               */
#*---------------------------------------------------------------------*/
if [ "$ssl " = "yes " ]; then
  bigloossllibs="$""(OPENSSLLIBS)";
  bigloossllibu="$""(OPENSSLLIBS)";
else
  bigloossllibs="";
  bigloossllibu="";
fi

if [ "$threads " = "yes " ]; then
  bigloopthlibs="-lbigloopthread_s-$""(RELEASE)";
  bigloopthlibu="-lbigloopthread_u-$""(RELEASE)";
  bigloogc="-lbigloogc_fth-$""(RELEASE)"
else
  bigloopthlibs="";
  bigloopthlibu="";
  bigloogc="-lbigloogc-$""(RELEASE)"
fi

mkmf=etc/Makefile.hopconfig

bglcloselibs_u=
bglcloselibs_s=

for p in $bglcloselibs; do
  bglcloselibs_u="$bglcloselibs_u -lbigloo$p""_u-$""(RELEASE)";
  bglcloselibs_s="$bglcloselibs_s -lbigloo$p""_s-$""(RELEASE)";
done

rm -f $mkmf 2> /dev/null
echo "#* Automatically generated file (don't edit) */" > $mkmf

if [ "$bldflags " = " " ]; then
  bldflags="-rpath \$(DESTDIR)\$(HOPLIBDIR)/\$(HOPFILDIR)"
fi

if [ "$mach " = " " ]; then
  mach="`$bigloo -eval '(begin (display (os-name)) (exit 0))'`-`$bigloo -eval '(begin (display (os-arch)) (exit 0))'`"
fi

for p in hopc.sh hop.sh; do
  cat etc/$p.in \
      | sed -e "s|@RELEASE@|$version|" \
            -e "s|@BRANCH@|$branch|" \
            -e "s|@DATE@|$date|" \
            -e "s|@DEVEL@|$devel|" \
            -e "s|@DEBUG@|$debug|" \
            -e "s|@HOP@|$hop|" \
            -e "s|@HOPC@|$hopc|" \
            -e "s|@BUILDDIR@|$PWD|" \
            -e "s|@BUILDLIBDIR@|$buildlibdir|" \
            -e "s|@BUILDETCDIR@|$PWD/etc|" \
            -e "s|@BUILDBINDIR@|$PWD/bin|" \
            -e "s|@BUILDSHAREDIR@|$buildsharedir|" \
            -e "s|@BUILDSPECIFIC@|$buildspecific|" \
            -e "s|@INSTALLSPECIFIC@|$installspecific|" \
            -e "s|@BINDIR@|$bindir|" \
            -e "s|@LIBDIR@|$libdir|" \
            -e "s|@LIBPATH@|$libdir/hop/$version|" \
  > bin/$p
  chmod a+rx bin/$p
done

if [ "$hopc" = "$PWD/bin/hopc" ]; then
  mkmfhopc=$hopc.sh
else  
  mkmfhopc=$hopc
fi

if [ "$hop" = "$PWD/bin/hop" ]; then
  mkmfhop=$hop.sh
else  
  mkmfhop=$hop
fi

cat $mkmf.in \
    | sed -e "s|@RELEASE@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@DATE@|$date|" \
          -e "s|@DEVEL@|$devel|" \
          -e "s|@DEBUG@|$debug|" \
          -e "s|@BIGLOO@|$bigloo|" \
          -e "s|@BIGLOOVERSION@|$bglversion|" \
          -e "s|@HOP@|$mkmfhop|" \
          -e "s|@HOPC@|$mkmfhopc|" \
          -e "s|@BGLCPP@|$bglcpp|" \
          -e "s|@BACKEND@|$backend|" \
          -e "s|@LINK@|$link|" \
          -e "s|@BIGLOOLIBDIR@|$bigloolibdir|" \
          -e "s|@AFILE@|$afile|" \
          -e "s|@JFILE@|$jfile|" \
          -e "s|@BTAGS@|$btags|" \
          -e "s|@BDEPEND@|$bdepend|" \
          -e "s|@CC@|$cc|" \
          -e "s|@FLASHCC@|$flashcc|" \
          -e "s|@UNZIP@|$unzip|" \
          -e "s|@GZIP@|$gzip|" \
          -e "s|@INSTALL@|$install|" \
          -e "s|@JAR@|$jar|" \
          -e "s|@JAVAC@|$javac|" \
          -e "s|@BCFLAGS@|$bcflags|" \
          -e "s|@BLDFLAGS@|$bldflags|" \
          -e "s|@BHFLAGS@|$bhflags|" \
          -e "s|@BTFLAGS@|$btflags|" \
          -e "s|@BCFLAGSRTS@|$bcflagsrts|" \
          -e "s|@BSCM2JSFLAGS@|$bscm2jsflags|" \
          -e "s|@BHOPCFLAGS@|$bhopcflags|" \
          -e "s|@BLFLAGS@|$blflags|" \
          -e "s|@FFLAGS@|$fflags|" \
          -e "s|@JVMZIPLIBS@|$jvmziplibs|" \
          -e "s|@JVMINITS@|$jvminits|" \
          -e "s|@CCFLAGS@|$ccflags|" \
          -e "s|@BCFLAGSDEV@|$bcflagsdev|" \
          -e "s|@BUILDDIR@|$PWD|" \
          -e "s|@BUILDLIBDIR@|$buildlibdir|" \
          -e "s|@BUILDETCDIR@|$PWD/etc|" \
          -e "s|@BUILDBINDIR@|$PWD/bin|" \
          -e "s|@BUILDSHAREDIR@|$buildsharedir|" \
          -e "s|@BUILDSPECIFIC@|$buildspecific|" \
          -e "s|@INSTALLSPECIFIC@|$installspecific|" \
          -e "s|@BINDIR@|$bindir|" \
          -e "s|@LIBDIR@|$libdir|" \
          -e "s|@LIBPATH@|$libdir/hop/$version|" \
          -e "s|@SHAREDIR@|$sharedir|" \
          -e "s|@MANDIR@|$mandir|" \
          -e "s|@PREFIX@|$prefix|" \
          -e "s|@ETCDIR@|$etcdir|" \
          -e "s|@WEBLETSDIR@|$webletsdir|" \
          -e "s|@CONTRIBSDIR@|$contribsdir|" \
          -e "s|@DOCDIR@|$docdir|" \
          -e "s|@DISTRIBDIR@|$distribdir|" \
          -e "s|@REPODIR@|$repodir|" \
          -e "s|@HOPSVN@|$svn|" \
          -e "s|@HOPDISTRIBDIR@|$distribdir|" \
          -e "s|@BIGLOOSSLLIBS@|$bigloossllibs|" \
          -e "s|@BIGLOOSSLLIBU@|$bigloossllibu|" \
          -e "s|@BIGLOOPTHLIBS@|$bigloopthlibs|" \
          -e "s|@BIGLOOPTHLIBU@|$bigloopthlibu|" \
          -e "s|@RTSCONFIG@|$rts|" \
          -e "s|@HOPGCCLOSELIB@|$bigloogc|" \
          -e "s|@BGLCLOSELIBS_U@|$bglcloselibs_u $bglextracloselibs|" \
          -e "s|@BGLCLOSELIBS_S@|$bglcloselibs_s $bglextracloselibs|" \
	  -e "s|@BGLMACH@|$mach|" \
	  -e "s|@BGLARCH@|$arch|" \
          -e "s|@BUILDID@|$buildid|" \
          -e "s|@CLOSURE@|$closure|" \
    >> $mkmf

# runtime/configure.scm
for p in configure.scm configure_noarch.sch configure_macosx.sch configure_android.sch; do
  configure=runtime/$p
  rm -f $configure 2> /dev/null
  echo ";* Automatically generated file (don't edit) */" > $configure
  cat etc/$p.in \
      | sed -e "s|@VERSION@|$version|" \
            -e "s|@BIGLOOVERSION@|$bglversion|" \
            -e "s|@BRANCH@|$branch|" \
            -e "s|@BACKEND@|$backend|" \
            -e "s|@LINK@|$link|" \
            -e "s|@URL@|$url|" \
            -e "s|@BINDIR@|$bindir|" \
            -e "s|@LIBDIR@|$libdir|" \
            -e "s|@LIBPATH@|$libdir/hop/$version|" \
            -e "s|@SHAREDIR@|$sharedir/$version|" \
            -e "s|@ETCDIR@|$etcdir|" \
            -e "s|@WEBLETSDIR@|$webletsdir|" \
            -e "s|@CONTRIBSDIR@|$contribsdir|" \
            -e "s|@DOCDIR@|$docdir|" \
            -e "s|@MIMETYPES@|$mimetypes|" \
            -e "s|@JSMIMETYPE@|$jsmimetype|" \
            -e "s|@CSSMIMETYPE@|$cssmimetype|" \
            -e "s|@HOPJSSANSSUFFIX@|$hopjssanssuffix|" \
            -e "s|@HOPJSFILES@|$hopjsfiles|" \
            -e "s|@HOPSERVICEBASE@|$hopservicebase|" \
            -e "s|@HOPZEROCONF@|$zeroconf|" \
            -e "s|@HOPSRFIS@|$hopsrfis|" \
            -e "s|@HOPMACH@|$mach|" \
            -e "s|@HOPARCH@|$arch|" \
            -e "s|@BUILDID@|$buildid|" \
      >> $configure
done

# nodejs/configure.scm
for p in nodejs.sch; do
  configure=nodejs/$p
  rm -f $configure 2> /dev/null
  echo ";* Automatically generated file (don't edit) */" > $configure
  cat etc/$p.in \
      | sed -e "s|@VERSION@|$version|" \
            -e "s|@BIGLOOVERSION@|$bglversion|" \
            -e "s|@BRANCH@|$branch|" \
            -e "s|@BACKEND@|$backend|" \
            -e "s|@LINK@|$link|" \
            -e "s|@URL@|$url|" \
            -e "s|@BINDIR@|$bindir|" \
            -e "s|@LIBDIR@|$libdir|" \
            -e "s|@LIBPATH@|$libdir/hop/$version|" \
            -e "s|@SHAREDIR@|$sharedir/$version|" \
            -e "s|@ETCDIR@|$etcdir|" \
            -e "s|@WEBLETSDIR@|$webletsdir|" \
            -e "s|@CONTRIBSDIR@|$contribsdir|" \
            -e "s|@DOCDIR@|$docdir|" \
            -e "s|@MIMETYPES@|$mimetypes|" \
            -e "s|@JSMIMETYPE@|$jsmimetype|" \
            -e "s|@CSSMIMETYPE@|$cssmimetype|" \
            -e "s|@HOPJSSANSSUFFIX@|$hopjssanssuffix|" \
            -e "s|@HOPJSFILES@|$hopjsfiles|" \
            -e "s|@HOPSERVICEBASE@|$hopservicebase|" \
            -e "s|@HOPZEROCONF@|$zeroconf|" \
            -e "s|@HOPSRFIS@|$hopsrfis|" \
            -e "s|@HOPMACH@|$mach|" \
            -e "s|@HOPARCH@|$arch|" \
      >> $configure
done

# script
for script in test/nodejs/TEST test/nodejs/HOP.exe test/hopjs/TEST; do
  rm -f $script 2> /dev/null
  cat $script.in \
      | sed -e "s|@VERSION@|$version|" \
            -e "s|@BIGLOOVERSION@|$bglversion|" \
            -e "s|@BRANCH@|$branch|" \
            -e "s|@BACKEND@|$backend|" \
            -e "s|@LINK@|$link|" \
            -e "s|@URL@|$url|" \
            -e "s|@BINDIR@|$bindir|" \
            -e "s|@LIBDIR@|$libdir|" \
            -e "s|@LIBPATH@|$libdir/hop/$version|" \
            -e "s|@SHAREDIR@|$sharedir/$version|" \
            -e "s|@ETCDIR@|$etcdir|" \
            -e "s|@WEBLETSDIR@|$webletsdir|" \
            -e "s|@CONTRIBSDIR@|$contribsdir|" \
            -e "s|@BUILDDIR@|$PWD|" \
            -e "s|@BUILDLIBDIR@|$buildlibdir|" \
            -e "s|@BUILDETCDIR@|$PWD/etc|" \
            -e "s|@BUILDBINDIR@|$PWD/bin|" \
            -e "s|@DOCDIR@|$docdir|" \
            -e "s|@MIMETYPES@|$mimetypes|" \
            -e "s|@JSMIMETYPE@|$jsmimetype|" \
            -e "s|@CSSMIMETYPE@|$cssmimetype|" \
            -e "s|@HOPJSSANSSUFFIX@|$hopjssanssuffix|" \
            -e "s|@HOPJSFILES@|$hopjsfiles|" \
            -e "s|@HOPSERVICEBASE@|$hopservicebase|" \
            -e "s|@HOPZEROCONF@|$zeroconf|" \
            -e "s|@HOPSRFIS@|$hopsrfis|" \
            -e "s|@HOPMACH@|$mach|" \
            -e "s|@HOPARCH@|$arch|" \
      >> $script
  chmod a+x $script
done

# hopjs
for file in etc/hopjs.el; do
  rm -f $file 2> /dev/null
  echo ";* Automatically generated file (don't edit) */" > $file
  cat $file.in \
      | sed -e "s|@VERSION@|$version|" \
            -e "s|@BIGLOOVERSION@|$bglversion|" \
            -e "s|@BRANCH@|$branch|" \
            -e "s|@BACKEND@|$backend|" \
            -e "s|@LINK@|$link|" \
            -e "s|@URL@|$url|" \
            -e "s|@BINDIR@|$bindir|" \
            -e "s|@LIBDIR@|$libdir|" \
            -e "s|@LIBPATH@|$libdir/hop/$version|" \
            -e "s|@SHAREDIR@|$sharedir/$version|" \
            -e "s|@ETCDIR@|$etcdir|" \
            -e "s|@WEBLETSDIR@|$webletsdir|" \
            -e "s|@CONTRIBSDIR@|$contribsdir|" \
            -e "s|@BUILDDIR@|$PWD|" \
            -e "s|@BUILDLIBDIR@|$buildlibdir|" \
            -e "s|@BUILDETCDIR@|$PWD/etc|" \
            -e "s|@BUILDBINDIR@|$PWD/bin|" \
            -e "s|@DOCDIR@|$docdir|" \
            -e "s|@DOCDIR@|$docdir|" \
      >> $file
  chmod a+x $file
done

#* # hopscript/configure.sch                                           */
#* for p in hopscript.sch; do                                          */
#*   configure=hopscript/$p                                            */
#*   rm -f $configure 2> /dev/null                                     */
#*   echo ";* Automatically generated file (don't edit) *}" > $configure */
#*   cat etc/$p.in \                                                   */
#*       | sed -e "s|@VERSION@|$version|" \                            */
#*             -e "s|@BIGLOOVERSION@|$bglversion|" \                   */
#*             -e "s|@BRANCH@|$branch|" \                              */
#*             -e "s|@BACKEND@|$backend|" \                            */
#*             -e "s|@LINK@|$link|" \                                  */
#*             -e "s|@URL@|$url|" \                                    */
#*             -e "s|@BINDIR@|$bindir|" \                              */
#*             -e "s|@LIBDIR@|$libdir|" \                              */
#*             -e "s|@LIBPATH@|$libdir/hop/$version|" \                */
#*             -e "s|@SHAREDIR@|$sharedir/$version|" \                 */
#*             -e "s|@ETCDIR@|$etcdir|" \                              */
#*             -e "s|@WEBLETSDIR@|$webletsdir|" \                      */
#*             -e "s|@CONTRIBSDIR@|$contribsdir|" \                    */
#*             -e "s|@DOCDIR@|$docdir|" \                    */
#*             -e "s|@MIMETYPES@|$mimetypes|" \                        */
#*             -e "s|@JSMIMETYPE@|$jsmimetype|" \                      */
#*             -e "s|@CSSMIMETYPE@|$cssmimetype|" \                    */
#*             -e "s|@HOPJSSANSSUFFIX@|$hopjssanssuffix|" \            */
#*             -e "s|@HOPJSFILES@|$hopjsfiles|" \                      */
#*             -e "s|@HOPSERVICEBASE@|$hopservicebase|" \              */
#*             -e "s|@HOPZEROCONF@|$zeroconf|" \                       */
#*             -e "s|@HOPSRFIS@|$hopsrfis|" \                          */
#*             -e "s|@HOPMACH@|$mach|" \                               */
#*             -e "s|@HOPARCH@|$arch|" \                               */
#*       >> $configure                                                 */
#* done                                                                */

# etc/hoprc.hop
hoprc=etc/hoprc.hop
rm -f $hoprc 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $hoprc
cat etc/hoprc.hop.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BINDIR@|$bindir|" \
          -e "s|@LIBDIR@|$libdir|" \
          -e "s|@LIBPATH@|$libdir/hop/$version|" \
          -e "s|@SHAREDIR@|$sharedir/$version|" \
          -e "s|@ETCDIR@|$etcdir|" \
          -e "s|@WEBLETSDIR@|$webletsdir|" \
          -e "s|@CONTRIBSDIR@|$contribsdir|" \
          -e "s|@DOCDIR@|$docdir|" \
          -e "s|@MIMETYPES@|$mimetypes|" \
    >> $hoprc

# etc/hopshrc.hop
hopshrc=etc/hopshrc.hop
rm -f $hopshrc 2> /dev/null
cat etc/hopshrc.hop.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BINDIR@|$bindir|" \
          -e "s|@LIBDIR@|$libdir|" \
          -e "s|@LIBPATH@|$libdir/hop/$version|" \
          -e "s|@SHAREDIR@|$sharedir/$version|" \
          -e "s|@ETCDIR@|$etcdir|" \
          -e "s|@WEBLETSDIR@|$webletsdir|" \
          -e "s|@CONTRIBSDIR@|$contribsdir|" \
          -e "s|@DOCDIR@|$docdir|" \
          -e "s|@MIMETYPES@|$mimetypes|" \
    >> $hopshrc

# lib/hop.init
init=lib/hop/$version/hop.init

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/hop.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BIGLOOCLOSELIBS@|$bglcloselibs|" \
    >> $init
echo "" >> $init

echo "(cond-expand" >> $init
echo "   (bigloo-compile" >> $init
cat runtime/xml_expd.sch >> $init
echo "" >> $init
cat runtime/param_expd.sch >> $init
echo "" >> $init
cat runtime/hss_expd.sch >> $init
echo "" >> $init
cat runtime/prefs_expd.sch >> $init
echo "" >> $init
cat runtime/service_expd.sch >> $init
echo "" >> $init
cat runtime/verbose_expd.sch >> $init
echo "" >> $init
cat runtime/expanders.sch >> $init
echo "" >> $init
echo "(hop-install-expanders!)" >> $init
echo "   ))" >> $init
chmod a-w $init

# lib/hopwidget.init
init=lib/hop/$version/hopwidget.init
mkdir -p lib
rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/hopwidget.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BIGLOOCLOSELIBS@|$bglcloselibs|" \
    >> $init
echo "" >> $init

# lib/scheme2js.init
init=lib/hop/$version/scheme2js.init
mkdir -p lib
mkdir -p scheme2js/o

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/scheme2js.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
    >> $init
echo "" >> $init
chmod a-w $init

# lib/hopscheme.init
init=lib/hop/$version/hopscheme.init
mkdir -p lib
mkdir -p hopscheme/o

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/hopscheme.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
    >> $init
echo "" >> $init
chmod a-w $init

# lib/hopdroid.init
if [ "$arch " = "android " ]; then
  init=lib/hop/$version/hopdroid.init
  mkdir -p lib
  mkdir -p hopdroid/o

  rm -f $init 2> /dev/null
  echo ";* Automatically generated file (don't edit) */" > $init
 
  cat etc/hopdroid.init.in \
      | sed -e "s|@VERSION@|$version|" \
            -e "s|@BRANCH@|$branch|" \
      >> $init
  echo "" >> $init
  chmod a-w $init
fi
  
# lib/js2scheme.init
init=lib/hop/$version/js2scheme.init
mkdir -p lib
mkdir -p js2scheme/o

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/js2scheme.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
    >> $init
echo "" >> $init
chmod a-w $init

# lib/hopscript.init
init=lib/hop/$version/hopscript.init
mkdir -p lib
mkdir -p hopscript/o

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/hopscript.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
    >> $init
echo "" >> $init

echo "(cond-expand" >> $init
echo "   (bigloo-compile" >> $init
echo "" >> $init
cat hopscript/property_expd.sch >> $init
echo "" >> $init
cat hopscript/expanders.sch >> $init
echo "" >> $init
echo "(hopscript-install-expanders!)" >> $init
echo "   ))" >> $init
chmod a-w $init

# lib/nodejs.init
init=lib/hop/$version/nodejs.init
mkdir -p lib
mkdir -p nodejs/o

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/nodejs.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
    >> $init
echo "" >> $init
chmod a-w $init

# share/hop-autoconf.js
for init in hop-autoconf.js hop-boot.js; do
  rm -f share/$init 2> /dev/null
  echo "/* Automatically generated file (don't edit) */" > share/$init

  cat etc/$init.in \
      | sed -e "s|@VERSION@|$version|" \
            -e "s|@BRANCH@|$branch|" \
            -e "s|@BACKEND@|$backend|" \
            -e "s|@LINK@|$link|" \
            -e "s|@URL@|$url|" \
            -e "s|@BINDIR@|$bindir|" \
            -e "s|@LIBDIR@|$libdir|" \
            -e "s|@LIBPATH@|$libdir/hop/$version|" \
            -e "s|@SHAREDIR@|$sharedir/$version|" \
            -e "s|@ETCDIR@|$etcdir|" \
            -e "s|@CONTRIBSDIR@|$contribsdir|" \
            -e "s|@DOCDIR@|$docdir|" \
            -e "s|@WEBLETSDIR@|$webletsdir|" \
            -e "s|@LOCEVENT@|$locevent|" \
            -e "s|@HOPSERVICEBASE@|$hopservicebase|" \
            -e "s|@BUILD@|$builid|" \
            -e "s|//[^\"]*$$||g" \
            -e "/^[ \t]*$$/D" \
      >> share/$init
  echo "" >> share/$init
  chmod a-w share/$init
done

# src/libraries.sch
lib=src/libraries.sch
rm -f $lib 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $lib

cat etc/libraries.sch.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@LIBRARIES@|$libraries|" \
    >> $lib
echo "" >> $lib
chmod a-w $lib

# man pages
for p in etc/hop.man etc/hopsh.man etc/hopreplay.man; do
  cat $p.in \
      | sed -e "s|@RELEASE@|$version|" \
            -e "s|@BRANCH@|$branch|" \
            -e "s|@DATE@|$date|" \
            -e "s|@DEVEL@|$devel|" \
            -e "s|@DEBUG@|$debug|" \
            -e "s|@BIGLOO@|$bigloo|" \
            -e "s|@BACKEND@|$backend|" \
            -e "s|@LINK@|$link|" \
      > $p
done

#*---------------------------------------------------------------------*/
#*    Debian script                                                    */
#*---------------------------------------------------------------------*/
if [ "$state " != " " ]; then
  minorversion=-$state$minor
else
  minorversion=
fi

# debian
deb=arch/debian/makedeb.sh
rm -f $deb 2> /dev/null
echo "#!/bin/sh" > $deb
echo "#* Automatically generated file (don't edit) */" >> $deb


cat $deb.in \
   | sed -e "s|#!/bin/sh||" \
         -e "s|@BIGLOOREQUIRED@|$bigloorequired|" \
         -e "s|@VERSION@|$version|" \
         -e "s|@MINOR@|$minorversion|" \
   > $deb  
chmod a+rx $deb
 
# android
and=arch/android/makeapk.sh
rm -f $and 2> /dev/null
echo "#!/bin/sh" > $and
echo "#* Automatically generated file (don't edit) */" >> $and

cat $and.in \
   | sed -e "s|#!/bin/sh||" \
         -e "s|@BIGLOOREQUIRED@|$bigloorequired|" \
         -e "s|@VERSION@|$hopversion|" \
         -e "s|@MINOR@|$minorversion|" \
   >> $and  
chmod a+rx $and
 
#*---------------------------------------------------------------------*/
#*    Summary                                                          */
#*---------------------------------------------------------------------*/

# Generate the config.status file to please debian packages
echo "configuration completed" > config.status

echo "** Configuration summary **"
echo 
echo "Release:"
echo "  hop release number.................... $version $state$minor"
echo "  bigloo................................ $bigloo ($bglversion)"
echo "  backend............................... $backend"
echo "  link.................................. $link"
echo "  devel mode............................ $devmode"
echo 
echo "Optional features:"
echo "  multi-threading....................... $threads"
echo "  https support......................... $ssl"
echo "  zeroconf.............................. $zeroconfbe"
echo
echo "Directories where Hop will be installed:"
echo "  etc directory......................... $etcdir"
echo "  bin directory......................... $bindir"
echo "  lib directory......................... $libdir"
echo "  share directory....................... $sharedir"
echo "  man directory......................... $mandir"
echo "  weblets directory..................... $webletsdir"
echo "  contribs directory.................... $contribsdir"
echo "  doc directory......................... $docdir"
echo 
echo "Internals:"
echo "  bigloo compilation flags.............. $bcflags"
echo "  bigloo link flags..................... $bldflags"
echo "  runtime compilation flags............. $bcflagsrts"
echo "  mime types............................ $mimetypes"
echo "  default JavaScript mime type.......... $jsmimetype"
echo "  default CSS mime type................. $cssmimetype"
echo "  closure compiler (optional)........... $closure"
echo
echo "Cross compilation:"
echo "  hop................................... $hop"
echo "  hopc.................................. $hopc"

