(cond-expand ((not enable-libuv) (define ENOENT (cond-expand ((and bigloo-c enable-libuv) (pragma::long "ENOENT")) (else 2))) (define EBADF (cond-expand ((and bigloo-c enable-libuv) (pragma::long "EBADF")) (else 9))) (define (next-tick %worker %this) #unspecified) (define (!js-callback0 name %worker %this proc obj) #unspecified) (define (!js-callback1 name %worker %this proc obj arg0) #unspecified) (define (!js-callback2 name %worker %this proc obj arg0 arg1) #unspecified) (define (!js-callback3 name %worker %this proc obj arg0 arg1 arg2) #unspecified) (define (!js-callback4 name %worker %this proc obj arg0 arg1 arg2 arg3) #unspecified) (define (!js-callback5 name %worker %this proc obj arg0 arg1 arg2 arg3 arg4) #unspecified) (define (to-uint64 n) #unspecified) (define (to-int64 %this proc offset default) #unspecified) (define (nodejs-uv-version::bstring) "") (define (nodejs-err-name::obj errno) #unspecified) (define (nodejs-process-title-init!) #unspecified) (define (nodejs-get-process-title::bstring) "") (define (nodejs-set-process-title! str) #unspecified) (define (worker-loop th::WorkerHopThread) #unspecified) (define (process-fail %this process errno) #unspecified) (define-method (js-worker-tick th::WorkerHopThread) #unspecified) (define-method (js-worker-loop th::WorkerHopThread) #unspecified) (define-method (js-worker-terminate! th::WorkerHopThread pred) #unspecified) (define-method (js-worker-push-thunk! th::WorkerHopThread name::bstring thunk::procedure) #unspecified) (define-method (js-worker-exec th::WorkerHopThread name::bstring thunk::procedure) #unspecified) (define (nodejs-now %worker) #unspecified) (define close-stack (quote ())) (define (nodejs-close %worker %this process this callback) #unspecified) (define (nodejs-ref obj %worker) #unspecified) (define (nodejs-unref obj %worker) #unspecified) (define (nodejs-make-timer %worker %this process obj) #unspecified) (define (nodejs-timer-start %worker timer start rep) #unspecified) (define (nodejs-timer-close %worker timer) #unspecified) (define (nodejs-timer-stop %worker timer) #unspecified) (define (nodejs-timer-unref %worker timer) #unspecified) (define (nodejs-hrtime::uint64) #u64:0) (define (nodejs-uptime::uint64 %worker) #u64:0) (define (nodejs-make-fs-event %worker) #unspecified) (define (nodejs-fs-event-start hdl proc path) #unspecified) (define (nodejs-fs-event-stop hdl) #unspecified) (define (nodejs-fs-event-change) #unspecified) (define (nodejs-fs-event-rename) #unspecified) (define (nodejs-make-fs-poll %worker) #unspecified) (define (nodejs-fs-poll-start %this proto hdl path proc interval) #unspecified) (define (nodejs-fs-poll-stop hdl) #unspecified) (define (nodejs-make-idle %worker %this callback) #unspecified) (define (nodejs-idle-start %worker %this obj) #unspecified) (define (nodejs-idle-stop %worker %this obj) #unspecified) (define (nodejs-check?::bool obj) #f) (define (nodejs-make-check %worker %this process) #unspecified) (define (nodejs-check-stop %worker %this obj) #unspecified) (define (nodejs-loadavg vec::u8vector) #unspecified) (define (nodejs-getfreemem::double) 0.0) (define (nodejs-gettotalmem::double) 0.0) (define (nodejs-getresidentmem::long) 0) (define (nodejs-getcpus::vector) (quote #())) (define (nodejs-exepath::bstring) "") (define (nodejs-getuptime::double) 0.0) (define (nodejs-kill %worker %this process pid sig) #unspecified) (define (not-implemented-exn fun %this) #unspecified) (define (fs-exn fmt obj %this) #unspecified) (define (fs-errno-exn fmt::bstring errno %this) #unspecified) (define (fs-errno-path-exn fmt::bstring errno %this path) #unspecified) (define (fs-callback %worker %this process callback name fmt res #!optional (ok (quote ()))) #unspecified) (define (fs-callback-error %worker %this name callback . args) #unspecified) (define (nodejs-rename-file %worker %this process oldp newp callback) #unspecified) (define (nodejs-ftruncate %worker %this process fd offset callback) #unspecified) (define (nodejs-truncate %worker %this process path offset callback) #unspecified) (define (nodejs-fchown %worker %this process fd uid guid callback) #unspecified) (define (nodejs-chown %worker %this process path uid guid callback) #unspecified) (define (nodejs-lchown %worker %this process path uid guid callback) #unspecified) (define (nodejs-fchmod %worker %this process fd mod callback) #unspecified) (define (nodejs-chmod %worker %this process path mod callback) #unspecified) (define (nodejs-lchmod %worker %this process fd mod callback) #unspecified) (define (nodejs-open %worker %this process path flags mode callback) #unspecified) (define (nodejs-fs-close %worker %this process fd callback) #unspecified) (define (stat-date stat %this) #unspecified) (define (stat->jsobj %this proto res) #unspecified) (define (stat-cb %worker %this process callback name obj proto lbl path) #unspecified) (define (nodejs-fstat %worker %this process fd callback proto) #unspecified) (define (nodejs-stat %worker %this process path callback proto) #unspecified) (define (nodejs-lstat %worker %this process path callback proto) #unspecified) (define (nodejs-link %worker %this process src dst callback) #unspecified) (define (nodejs-symlink %worker %this process src dst callback) #unspecified) (define (nodejs-readlink %worker %this process src callback) #unspecified) (define (nodejs-unlink %worker %this process src callback) #unspecified) (define (nodejs-rmdir %worker %this process src callback) #unspecified) (define (nodejs-fdatasync %worker %this process fd callback) #unspecified) (define (nodejs-mkdir %worker %this process path mode callback) #unspecified) (define (nodejs-write %worker %this process fd buffer offset length position callback) #unspecified) (define (nodejs-read %worker %this process fd buffer offset length position callback) #unspecified) (define (js-todouble num %this) #unspecified) (define (nodejs-utimes %worker %this process path atime mtime callback) #unspecified) (define (nodejs-futimes %worker %this process fd atime mtime callback) #unspecified) (define (nodejs-fsync %worker %this process fd callback) #unspecified) (define (nodejs-getaddrinfo %worker %this process node family) #unspecified) (define (nodejs-query %worker %this process node family cb) #unspecified) (define (nodejs-isip addr) #unspecified) (define (nodejs-istty %worker %this fd) #unspecified) (define (nodejs-guess-handle-type %worker %this fd) (js-string->jsstring "TTY")) (define (nodejs-tcp-handle %worker) #unspecified) (define (nodejs-stream-write-queue-size::long hdl) 0) (define (nodejs-stream-fd::long %worker hdl) 0) (define (nodejs-tcp-connect %worker %this handle host port family callback) #unspecified) (define (nodejs-tcp-nodelay handle enable) #unspecified) (define (nodejs-tcp-keepalive handle enable timeout) #unspecified) (define (nodejs-tcp-simultaneous-accepts handle enable) #unspecified) (define (nodejs-tcp-getsockname %this handle) #unspecified) (define (nodejs-tcp-getpeername %this handle) #unspecified) (define (nodejs-tcp-open %worker %this handle fd) #unspecified) (define (nodejs-tcp-bind %this process handle addr port family) #unspecified) (define (nodejs-tcp-listen %worker %this process this handle backlog tcp-wrap) #unspecified) (define (nodejs-tty-handle %worker fd readable) #unspecified) (define (nodejs-tty-set-raw-mode handle) #unspecified) (define (nodejs-tty-get-window-size %worker %this handle) #unspecified) (define (nodejs-udp-handle %worker) #unspecified) (define (nodejs-udp-bind %this process handle addr port family flags) #unspecified) (define (nodejs-udp-send %worker %this handle buffer offset length port address family callback) #unspecified) (define (nodejs-udp-recv-start %worker %this handle onalloc callback) #unspecified) (define (nodejs-udp-recv-stop handle) #unspecified) (define (nodejs-udp-getsockname %this handle) #unspecified) (define (nodejs-udp-set-ttl handle ttl) #unspecified) (define (nodejs-udp-set-multicast-ttl handle ttl) #unspecified) (define (nodejs-udp-set-multicast-loop handle on) #unspecified) (define (nodejs-udp-set-broadcast handle on) #unspecified) (define (nodejs-udp-set-membership handle addr iface action) #unspecified) (define (nodejs-stream-write %worker %this handle buffer offset length callback) #unspecified) (define (nodejs-stream-write2 %worker %this handle buffer offset length sendhandle callback) #unspecified) (define (nodejs-stream-read-start %worker %this process handle onalloc callback) #unspecified) (define (nodejs-stream-read-stop %worker %this handle) #unspecified) (define (nodejs-stream-shutdown %worker %this handle callback) #unspecified) (define (store-stream-fd! %worker hdl fd::int) #unspecified) (define (uvfile->int %worker file) #unspecified) (define (int->uvhandle %worker %this fd::int) #unspecified) (define (close-uvfile %worker fd::int) #unspecified) (define (nodejs-new-process) #unspecified) (define (nodejs-process-spawn %worker %this %process process options) #unspecified) (define (nodejs-process-kill %worker %this %process this sig) #unspecified) (define (nodejs-new-pipe %worker ipc) #unspecified) (define (nodejs-pipe-ipc? pipe) #unspecified) (define (nodejs-pipe-accept %worker %this this pending-type) #unspecified) (define (nodejs-pipe-open %worker %this handle fd) #unspecified) (define (nodejs-pipe-bind %this process handle name) #unspecified) (define (nodejs-pipe-connect %worker %this handle name callback) #unspecified) (define (nodejs-pipe-listen %worker %this process this handle backlog) #unspecified)))
