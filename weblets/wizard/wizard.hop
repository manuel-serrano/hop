;*=====================================================================*/
;*    serrano/prgm/project/hop/3.1.x/weblets/wizard/wizard.hop         */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Feb 14 06:14:00 2005                          */
;*    Last change :  Wed Jun 29 20:25:18 2016 (serrano)                */
;*    Copyright   :  2005-16 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP account creation wizard                                      */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module weblet_wizard)

;*---------------------------------------------------------------------*/
;*    hoprc-dir ...                                                    */
;*---------------------------------------------------------------------*/
(define-parameter hoprc-dir
   (let ((d (hop-rc-directory)))
      (unless (directory? d)
	 (make-directories d))
      d))

;*---------------------------------------------------------------------*/
;*    wizard ...                                                       */
;*---------------------------------------------------------------------*/
(define-service (wizard)
   (<HTML>
      (<HEAD>
	 (<META> :name "viewport"
	    :content "width=device-width, height=device-height, initial-scale")
	 :title "Hop Wizard"
	 :base (service-base-url wizard (current-request))
	 :include "md5" 
	 :include "hop-password" "hop-foot"
	 :css "wizard.hss"
	 :favicon "etc/favicon.png")
      (<BODY>
	 ~(define (crypt na pd)
	     (string-append "+" (digest-password-encrypt na pd (hop-realm))))
	 ~(define exprs '())
	 ~(define (require id value)
	     (let ((el (dom-get-element-by-id document id)))
		(if (string=? value "")
		    (set! el.className "optional")
		    (set! el.className "required"))))
	 ~(define (save-accounts)
	     (let* ((status (dom-get-element-by-id document "status"))
		    (message (dom-get-element-by-id document "message"))
		    (msg (dom-get-element-by-id document "message"))
		    (apasswd (dom-get-element-by-id document "apasswd"))
		    (uname (dom-get-element-by-id document "uname"))
		    (upasswd (dom-get-element-by-id document "upasswd"))
		    (udir (dom-get-element-by-id document "udir"))
		    (gname (dom-get-element-by-id document "gname"))
		    (gpasswd (dom-get-element-by-id document "gpasswd"))
		    (cadmin (crypt "admin" apasswd.value))
		    (cuser (if (and (> (string-length uname.value) 0)
				    (> (string-length upasswd.value) 0))
			       (crypt uname.value upasswd.value)
			       #f))
		    (cguest (if (and (> (string-length gname.value) 0)
				     (> (string-length gpasswd.value) 0))
				(crypt gname.value gpasswd.value)
				#f))
		    (proxy (dom-get-element-by-id document "proxy"))
		    (proxyu (dom-get-element-by-id document "uproxy"))
		    (proxya (dom-get-element-by-id document "aproxy"))
		    (proxyr (dom-get-element-by-id document "rproxy"))
		    (proxym (map (lambda (i)
				    (let ((el (dom-get-element-by-id document i)))
				       el.value))
				 '("mip1" "mip2" "mip3" "mip4")))
		    (localp (dom-get-element-by-id document "localp"))
		    (webdav (dom-get-element-by-id document "webdav")))
		(cond
		   ((string=? apasswd.value "")
		    (alert "Missing password for `admin' user!"))
		   ((and (not (string=? uname.value "")) (string=? upasswd.value ""))
		    (alert "Missing password for `regular' user!"))
		   ((and (not (string=? gname.value "")) (string=? gpasswd.value ""))
		    (alert "Missing password for `guest' user!"))
		   (else
		    (with-hop ($wizard/save #f cadmin uname.value cuser udir.value
					    gname.value cguest
					    proxy.value proxyu.value
					    proxya.value proxyr.value proxym
					    localp.checked 
					    webdav.checked)
		       (lambda (h)
			  (case (car h)
			     ((query)
			      (let ((msg (string-append
					  "The file `" (cadr h)
					  "' already exists. Override it ?")))
				 (if (confirm msg)
				     (with-hop ($wizard/save #t cadmin
							     uname.value cuser udir.value
							     gname.value cguest
							     proxy.value
							     proxyu.value proxya.value
							     proxyr.value proxym
							     localp.checked 
							     webdav.checked)
					(lambda (h)
					   (innerHTML-set! status (cadr h))
					   (innerHTML-set! message
							   (if (pair? (cddr h))
							       (caddr h)
							       ""))))
				     (begin
					(innerHTML-set! status "Nothing saved")
					(innerHTML-set! message "")))))
			     (else
			      (innerHTML-set! status (cadr h))
			      (if (pair? (cddr h))
				  (innerHTML-set! message (caddr h))
				  (innerHTML-set! message ""))))))))))
	 
	 (<DIV> :align "center"
	    (<TABLE> :class "wizard" 
	       (<TR>
		  (<TD>
		     (<IMG> :src "etc/logo.png"))
		  (<TD>
		     (<TABLE>
			(<TR>
			   (<TD> :colspan 2
			      (<DIV> :id "title" "Hop Wizard")
			      (<DIV> :id "description"
				 [The Wizard creates the minimal
				      ,(<TT> :title (make-file-path (hoprc-dir) "hoprc.hop")
					  "hoprc.hop") file that
				      is required for running HOP.])))
			(<TR>
			   (<TD> :colspan 2
			      (<SPAN> :class "head" "Accounts:")))
			(<TR>
			   (<TD> :colspan 2
			      (<ADMIN-USER>)))
			(<TR>
			   (<TD> :colspan 2
			      (<PLAIN-USER>)))
			(<TR>
			   (<TD> :colspan 2
			      (<GUEST-USER>)))
			(<TR>
			   (<TD> :colspan 2
			      (<ANONYMOUS-USER>)))
			(<TR>
			   (<TD> :colspan 2
			      (<SPAN> :class "head" "Internet connection:")))
			(<TR>
			   (<TD> :colspan 2
			      (<INTERNET>)))
			(<TR>
			   (<TD> :colspan 2
			      (<SPAN> :class "head" "Proxy services:")))
			(<TR>
			   (<TD> :colspan 2
			      (<PROXY>)))
			(<TR>
			   (<TD> :colspan 2
			      (<SPAN> :class "head" "WebDAV:")))
			(<TR>
			   (<TD> :colspan 2
			      (<WEBDAV>)))
			(<TR> 
			   (<TD> :colspan 2
			      (<BUTTON>
				 "Save settings"
				 :onclick ~(save-accounts))
			      " "
			      (<SPAN> :id "status" "")))
			(<TR>
			   (<TD> :colspan 2
			      (<DIV> :class "message"
				 :id "message" ""))))))))
	 (<FOOT>))))

;*---------------------------------------------------------------------*/
;*    <ADMIN-USER> ...                                                 */
;*---------------------------------------------------------------------*/
(define (<ADMIN-USER>)
   (<TABLE> :class "wizard-user wizard-admin"
      (<TR> (<TD> :class "logo" (<IMG> :src (make-file-name "etc" "admin.png")))
	    (<TD> (<TABLE>
		     (<TR> (<TH> "Admin"))
		     (<TR> (<TD> (<TABLE> :class "wizard-user-body"
				    (<TR>
				       (<TD> :class "legend" "password:")
				       (<TD> (<INPUT> :type 'password
						:class "required"
						:id "apasswd"
						:size 30))))))
		     (<TR> (<TD> :class "comment"
			      [This Hop user is granted administration
permissions. He may install/uninstall Hop softwares (aka Hop weblets). He
may add/delete Hop users. Etc.])))))))

;*---------------------------------------------------------------------*/
;*    <PLAIN-USER> ...                                                 */
;*---------------------------------------------------------------------*/
(define (<PLAIN-USER>)
   
   (define (home)
      (let ((h (getenv "HOME")))
	 (if (string? h)
	     h
	     (dirname (dirname (hop-rc-directory))))))
      
   (<TABLE> :class "wizard-user wizard-regular"
      (<TR> (<TD> :class "logo" (<IMG> :src (make-file-name "etc" "user.png")))
	    (<TD> (<TABLE>
		     (<TR> (<TH> "Regular User"))
		     (<TR> (<TD> (<TABLE> :class "wizard-user-body"
				    (<TR>
				       (<TD> :class "legend" "name:")
				       (<TD> (<INPUT> :type 'text
						:class "optional"
						:onkeypress
						~(require "upasswd" this.value)
						:id "uname"
						:size 30)))
				    (<TR>
				       (<TD> :class "legend" "password:")
				       (<TD> (<INPUT> :type 'password
						:class "optional"
						:id "upasswd"
						:size 30)))
				    (<TR>
				       (<TD> :class "legend" "path:")
				       (<TD> (<INPUT> :type 'text
						:class "optional"
						:id "udir"
						:size 30
						:value (home)))))))
		     (<TR> (<TD> :class "comment"
			      [This user is the regular user, that is the
user that executes most Hop weblets. It can access the part disk system
specified by path (,(<TT> "*") grants access to all disks). The regular user is
likely to be the owner of the Hop process.])))))))

;*---------------------------------------------------------------------*/
;*    <GUEST-USER> ...                                                 */
;*---------------------------------------------------------------------*/
(define (<GUEST-USER>)
   (<TABLE> :class "wizard-user wizard-guest"
      (<TR> (<TD> :class "logo" (<IMG> :src (make-file-name "etc" "guest.png")))
	    (<TD> (<TABLE>
		     (<TR> (<TH> "Guests"))
		     (<TR> (<TD> (<TABLE> :class "wizard-user-body"
				    (<TR>
				       (<TD> :class "legend" "name:")
				       (<TD> (<INPUT> :type 'text
						:class "optional"
						:id "gname"
						:onkeypress
						~(require "gpasswd" this.value)
						:value ""
						:size 30)))
				    (<TR>
				       (<TD> :class "legend" "password:")
				       (<TD> (<INPUT> :type 'password
						:class "optional"
						:id "gpasswd"
						:size 30))))))
		     (<TR> (<TD> :class "comment"
			      [This account is used for guest users. Guests
can only access the directory ,(<TT> "guest") of the Hop RC directory.])))))))

;*---------------------------------------------------------------------*/
;*    <ANONYMOUS-USER> ...                                             */
;*---------------------------------------------------------------------*/
(define (<ANONYMOUS-USER>)
   (<TABLE> :class "wizard-user wizard-anonymous"
      (<TR> (<TD> :class "logo" (<IMG> :src (make-file-name "etc" "anonymous.png")))
	 (<TD> (<TABLE>
		  (<COLGROUP> (<COL> :width "0*"))
		  (<TR> (<TH> :colspan 2 "Anonymous"))
		  (<TR> (<TD> 
			   (<INPUT> :type 'checkbox :id "localp" :checked #t))
		     (<TD> (<SPAN> "Allow anonymous requests from the local host")))
		  (<TR> (<TD>
			   (<TD> :class "comment"
			      "Lets Hop accepts all anonymous requests (services and resources) coming from local host"))))))))
		     

;*---------------------------------------------------------------------*/
;*    <INTERNET>                                                       */
;*---------------------------------------------------------------------*/
(define (<INTERNET>)
   (<TABLE> :class "wizard-user wizard-internet"
      (<TR> (<TD>
	       (<SPAN> :class "legend" "Proxy for Hop remote Web accesses: ")
	       (<INPUT> :type 'text
		  :class "optional"
		  :id "proxy"
		  :value ""
		  :size 40)))))

;*---------------------------------------------------------------------*/
;*    <PROXY> ...                                                      */
;*---------------------------------------------------------------------*/
(define (<PROXY>)
   (<TABLE> :class "wizard-user wizard-proxy"
      (<COLGROUP> (<COL> :width "0*"))
      (<TR> (<TD> 
	       (<INPUT> :type 'checkbox :id "uproxy" :checked #t))
	    (<TD> (<SPAN> "Enable proxy services")))
      (<TR> (<TD>) (<TD> :class "comment" [This allows browsers to use Hop as
a web proxy.]))
      (<TR> (<TD> 
	       (<INPUT> :type 'checkbox :id "aproxy" :checked #f))
	    (<TD> (<SPAN> "Enable anonymous proxy services")))
      (<TR> (<TD>) (<TD> :class "comment"
		      (<SPAN> [Unless selected, proxy accesses
require authentication. This allows to keep trace of proxy connections.])))
      (<TR> (<TD> 
	       (<INPUT> :type 'checkbox :id "rproxy" :checked #f
		  onclick: ~(let ((v (not this.checked)))
			       (for-each (lambda (i)
					    (let ((e (dom-get-element-by-id
						      document i)))
					       (set! e.disabled v)))
					 '("mip1" "mip2" "mip3" "mip4")))))
	    (<TD> (<SPAN> "Allow remote proxy connections")))
      (<TR> (<TD>) (<TD> :class "comment"
		      (<SPAN> [Unless selected, only the local computer, 
that is the computer running this Hop, can use it as proxy.])))
      (<TR> (<TD>)
	    (<TD>
	       (<SPAN> :class "head" "IP mask: ")
	       (<INPUT> :id "mip1"
		  :type 'text :disabled #t :size 3 :maxlength 3 :value "255")
	       "."
	       (<INPUT> :id "mip2"
		  :type 'text :disabled #t :size 3 :maxlength 3 :value "255")
	       "."
	       (<INPUT> :id "mip3"
		  :type 'text :disabled #t :size 3 :maxlength 3 :value "255")
	       "."
	       (<INPUT> :id "mip4"
		  :type 'text :disabled #t :size 3 :maxlength 3 :value "255")))
      (<TR> (<TD>) (<TD> :class "comment"
		      (<SPAN> [Specifying an IP mask limits the IP addresses
of computers that are allowed to use this Hop as proxy.])))))

;*---------------------------------------------------------------------*/
;*    <WEBDAV> ...                                                     */
;*---------------------------------------------------------------------*/
(define (<WEBDAV>)
   (let* ((file "webdav.wiki")
	  (url (format "/hop/doc/feature?feature=~a" file)))
      (<TABLE> :class "wizard-user wizard-misc"
	 (<COLGROUP> (<COL> :width "0*"))
	 (<TR> (<TD> 
		  (<INPUT> :type 'checkbox :id "webdav" :checked #t))
	       (<TD> (<SPAN> "Enable "
			     (<A> :href url "WebDAV")
			     " services")))
	 (<TR> (<TD>) (<TD> :class "comment"
		      (<SPAN> [Enable/disable Hop WebDAV server. This default
setting can be overriden when starting Hop.]))))))

;*---------------------------------------------------------------------*/
;*    wizard/documentation ...                                         */
;*---------------------------------------------------------------------*/
(define-service (wizard/documentation)
   (let* ((file (service-resource wizard/documentation "etc/wizard.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    wizard/save ...                                                  */
;*---------------------------------------------------------------------*/
(define-service (wizard/save force
			     apasswd uname upasswd udir
			     gname gpasswd
			     proxy
			     user-proxy anonymous-proxy
			     remote-proxy proxy-mask
			     localp 
			     webdav)
   (let* ((rc (make-file-name (hoprc-dir) (hop-rc-file)))
	  (wd (make-file-name (hoprc-dir) "wizard.hop")))
      (cond
	 (force
	  (save (hoprc-dir) rc wd apasswd uname upasswd udir gname gpasswd
		proxy user-proxy anonymous-proxy remote-proxy proxy-mask
		localp webdav))
	 ((file-exists? rc)
	  (list 'query (format "File exists ~a" rc)))
	 ((file-exists? wd)
	  (list 'query (format "File exists ~a" wd)))
	 (else
	  (save (hoprc-dir) rc wd apasswd uname upasswd udir gname gpasswd
		proxy user-proxy anonymous-proxy remote-proxy proxy-mask
		localp webdav)))))

;*---------------------------------------------------------------------*/
;*    save ...                                                         */
;*---------------------------------------------------------------------*/
(define (save rcdir rcfile passwdfile
	      apasswd uname upasswd udir gname gpasswd
	      proxy uproxy anonymous-proxy remote-proxy proxy-mask
	      localp webdav)
   (unless (and (file-exists? rcdir) (directory? rcdir))
      (make-directories rcdir))
   (with-output-to-file rcfile
      (lambda ()
	 (print ";; generated file, Hop Wizard " (current-date))
	 (print ";; default rc file")
	 (write '(let ((path (make-file-name (hop-etc-directory) "hoprc.hop")))
		  (when (file-exists? path) (hop-load path))))
	 (newline)
	 (newline)
	 (print ";; wizard file")
	 (write `(hop-load-rc ,(basename passwdfile)))
	 (newline)
	 (newline)
	 (unless (string=? proxy "")
	    (print ";; hop proxy")
	    (write `(hop-proxy-set! ,proxy))
	    (newline)
	    (newline))
	 (print ";; proxying")
	 (write `(hop-enable-proxying-set! ,uproxy))
	 (newline)
	 (newline)
	 (when proxy
	    (print ";; proxy authentication")
	    (write `(hop-proxy-authentication-set! ,(not anonymous-proxy)))
	    (newline)
	    (newline)
	    (print ";; proxy remote connections")
	    (write `(hop-proxy-allow-remote-client-set! ,remote-proxy))
	    (newline)
	    (newline)
	    (when remote-proxy
	       (print ";; proxy remote authentication")
	       (write `(hop-proxy-remote-authentication-set! ,(not anonymous-proxy)))
	       (newline)
	       (newline))
	    (when proxy-mask
	       (print ";; proxy IP mask")
	       (write `(hop-proxy-ip-mask-set!
			  ,(apply format "~a.~a.~a.~a" proxy-mask)))
	       (newline)
	       (newline)))
	 (print ";; WebDAV")
	 (write `(hop-enable-webdav-set! ,webdav))
	 (newline)
	 (newline)
	 (when localp
	    (print ";; anonymous local requests")
	    (print '(hop-service-access-control-set!
		     (lambda (req svc)
			(http-request-local? req))))
	    (print '(hop-path-access-control-set!
		     (lambda (req svc)
			(http-request-local? req))))
	    (newline))))
   (let ((accounts "admin"))
      (with-output-to-file passwdfile
	 (lambda ()
	    (print ";; generated file, Hop Wizard " (current-date))
	    (print ";; anonymous user")
	    (write `(add-user! "anonymous" :services '(public shutdown/kill)))
	    (newline)
	    (newline)
	    (print ";; admin")
	    (write `(add-user! "admin"
			       :groups '(admin exec)
			       :password ,apasswd
			       :directories (cons "/tmp" (hop-path))
			       :services '*))
	    (newline)
	    (newline)
	    (when (string? upasswd)
	       (print ";; " uname)
	       (set! accounts (string-append "admin, " uname))
	       (write `(add-user! ,uname
				  :groups '(exec)
				  :password ,upasswd
				  :directories (cons* ,(if (equal? udir "*")
							   '*
							   udir)
						      "/tmp"
  						      (hop-path))
				  :services '*))
	       (newline)
	       (newline))
	    (when (string? gpasswd)
	       (print ";; " gname)
	       (set! accounts (string-append accounts ", " gname))
	       (write `(add-user! ,gname
				  :groups '(guest)
				  :password ,gpasswd
				  :directories (cons*
						(make-file-name
						 (hop-rc-directory)
						 "guest")
						"/tmp"
						(hop-path))))
	       (newline)
	       (newline))))
      (list 'save
	    (format "Accounts for ~a saved in `<TT>~a</TT>'.<BR>You must now <A href='/hop/shutdown?exitval=5&restart=yes'>shutdown</a> and restart Hop!" accounts passwdfile))))


