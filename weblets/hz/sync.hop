;*=====================================================================*/
;*    serrano/prgm/project/hop/3.1.x/weblets/hz/sync.hop               */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Mar 17 09:28:32 2006                          */
;*    Last change :  Sun Oct 30 16:31:20 2016 (serrano)                */
;*    Copyright   :  2006-16 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP hz sync                                                      */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hz_sync
   
   (import  hz_config
	    hz_weblet
	    hz_db)

   (export  (hz-sync-authenticate! ::bstring ::bstring ::bstring)
	    (hz-sync!::pair-nil)
	    (hz-sync-standard-weblets!)))

;*---------------------------------------------------------------------*/
;*    *hz-mutex*                                                       */
;*---------------------------------------------------------------------*/
(define *hz-mutex* (make-mutex 'hz))

;*---------------------------------------------------------------------*/
;*    *url-authenticate-table*                                         */
;*---------------------------------------------------------------------*/
(define *url-authenticate-table* (make-hashtable))

;*---------------------------------------------------------------------*/
;*    hz-sync-authenticate! ...                                        */
;*---------------------------------------------------------------------*/
(define (hz-sync-authenticate! url user passwd)
   (with-lock *hz-mutex*
      (lambda ()
	 (hashtable-put! *url-authenticate-table* url (cons user passwd))))
   #t)

;*---------------------------------------------------------------------*/
;*    hz-sync! ...                                                     */
;*    -------------------------------------------------------------    */
;*    This function modifies the database and returns a list of        */
;*    bad weblets.                                                     */
;*---------------------------------------------------------------------*/
(define (hz-sync!::pair-nil)
   (hz-db-sync-date-update! (current-date))
   (hz-db-sync-stamp-inc!)
   (hz-sync-standard-weblets!)
   (bind-exit (escape)
      (append-map (lambda (p)
		     (hz-sync-publisher! p escape))
	 (hz-publishers))))

;*---------------------------------------------------------------------*/
;*    hz-sync-publisher! ...                                           */
;*---------------------------------------------------------------------*/
(define (hz-sync-publisher! pub escape)
   (if (and pub (or (string? pub) (cadr pub)))
       (let* ((url (if (pair? pub) (car pub) pub))
	      (auth (with-lock *hz-mutex*
		       (lambda ()
			  (hashtable-get *url-authenticate-table* url))))
	      (basic-auth (when (pair? auth)
			     (http-basic-authorization (car auth) (cdr auth))))
	      (stamp (hz-db-sync-stamp)))
	  (with-handler
	     (lambda (e)
		(when (>fx (bigloo-debug) 0)
		   (exception-notify e))
		(cond
		   ((or (isa? e &hop-authentication-error)
			(isa? e http-response-authentication))
		    (escape url))
		   ((isa? e &error)
		    (with-access::&error e (msg)
		       (list (cons url msg))))
		   (else
		    (list (cons url e)))))
	     (with-url url
		(lambda (s)
		   (with-input-from-string s
		      (lambda ()
			 (filter-map (lambda (e)
					(let ((w (info->weblet e
						    :authorization basic-auth
						    :publisher pub
						    :stamp stamp)))
					   (hz-db-add-or-update! w)
					   #f))
			    (read)))))
		:timeout (hz-connection-timeout)
		:header (if basic-auth
			    (list (list authorization: basic-auth))
			    '()))))
       '()))

;*---------------------------------------------------------------------*/
;*    *standard-insync* ...                                            */
;*---------------------------------------------------------------------*/
(define *standard-insync* #f)

;*---------------------------------------------------------------------*/
;*    hz-sync-standard-weblets! ...                                    */
;*    -------------------------------------------------------------    */
;*    Sync all the standard weblets in the database.                   */
;*---------------------------------------------------------------------*/
(define (hz-sync-standard-weblets!)
   
   (define (sync-weblet! dir ifile)
      (when (file-exists? ifile)
	 (with-handler
	    (lambda (e)
	       (when (isa? e &error) (error-notify e))
	       #f)
	    (with-input-from-file ifile
	       (lambda ()
		  (let* ((i (read))
			 (i2 (if (assq 'category i)
				 i
				 (cons `(category "hop") i)))
			 (i3 (if (assq 'home i2)
				 i2
				 (cons `(home "/hop") i2)))
			 (w (info->weblet i3 :name (basename dir) :url dir)))
		     (with-access::weblet w (version driver install)
			(set! driver "standard")
			(set! install version))
		     (hz-db-add-or-update! w)))))))
   
   (define (sync-dir! dir)
      (when (directory? dir)
	 (sync-weblet! dir (make-file-path dir "etc" "weblet.info"))))

   (unless *standard-insync*
      (set! *standard-insync* #t)
      (for-each sync-dir! (directory->path-list (hop-weblets-directory)))))
