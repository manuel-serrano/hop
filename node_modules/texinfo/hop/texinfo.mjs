/*=====================================================================*/
/*    .../prgm/project/hop/hop/node_modules/texinfo/hop/texinfo.js     */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Sun Jul  6 06:11:11 2014                          */
/*    Last change :  Mon Sep 30 15:43:11 2024 (serrano)                */
/*    Copyright   :  2014-24 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    HOP texinfo parser/generator                                     */
/*=====================================================================*/
"use hopscript"

/*---------------------------------------------------------------------*/
/*    Bigloo module clause to spawn hopjs TEXINFO initialization       */
/*---------------------------------------------------------------------*/
const path = require("path");
const texinfo = require("./_texinfo.hop");

/*---------------------------------------------------------------------*/
/*    isChapter ...                                                    */
/*---------------------------------------------------------------------*/
function isChapter(el) {
   return typeof(el) === "xml-element" 
      && el.className 
      && el.className.indexOf("chapter") >= 0;
}

/*---------------------------------------------------------------------*/
/*    texinfo.Texinfo.chapters                                         */
/*---------------------------------------------------------------------*/
texinfo.Texinfo.chapters = function() {
   return this.XML.filter(isChapter);
}

/*---------------------------------------------------------------------*/
/*    texinfo.Texinfo.getChapterByTitle ...                            */
/*---------------------------------------------------------------------*/
texinfo.Texinfo.getChapterByTitle = function(title) {
   const xml = this.XML;
   
   // find the chapter
   for(let i = 0; i < xml.length; i++) {
      if(isChapter(xml[ i ]) && xml[ i ].innerHTML === title) {
	 for(let j = i + 1; j < xml.length; j++) {
	    if(isChapter(xml[ j ])) {
	       return xml.slice(i, j);
	    }
	 }
	 return xml.slice(i);
      }
   }
   
   return undefined;
}

/*---------------------------------------------------------------------*/
/*    texinfo.Texinfo.getChapterByIndex ...                            */
/*---------------------------------------------------------------------*/
texinfo.Texinfo.getChapterByIndex = function(index) {
   const xml = this.XML;
   
   // find the chapter
   for(let i = 0, idx = 0; i < xml.length; i++) {
      if(isChapter(xml[ i ])) {
	 if(idx === index) {
	    for(let j = i + 1; j < xml.length; j++) {
	       if(isChapter(xml[ j ])) {
	       	  return xml.slice(i, j);
	       }
	    }
	    return xml.slice(i);
	 } else {
	    idx++;
	 }
      }
   }
   
   return undefined;
}

/*---------------------------------------------------------------------*/
/*    XML tags                                                         */
/*---------------------------------------------------------------------*/
exports.H1 = texinfo[ "TEXINFO:H1" ];
exports.H2 = texinfo[ "TEXINFO:H2" ];
exports.H3 = texinfo[ "TEXINFO:H3" ];
exports.H4 = texinfo[ "TEXINFO:H4" ];
exports.H5 = texinfo[ "TEXINFO:H5" ];
exports.CODE = texinfo[ "TEXINFO:CODE" ];
exports.PRE = texinfo[ "TEXINFO:PRE" ];
exports.LI = texinfo[ "TEXINFO:LI" ];
exports.UL = texinfo[ "TEXINFO:UL" ];
exports.OL = texinfo[ "TEXINFO:OL" ];
exports.HR = texinfo[ "TEXINFO:HR" ];
exports.P = texinfo[ "TEXINFO:P" ];
exports.A = texinfo[ "TEXINFO:A" ];
exports.STRONG = texinfo[ "TEXINFO:STRONG" ];
exports.BLOCKQUOTE = texinfo[ "TEXINFO:BLOCKQUOTE" ];
exports.IMG = texinfo[ "TEXINFO:IMG" ];

/*---------------------------------------------------------------------*/
/*    parser ...                                                       */
/*---------------------------------------------------------------------*/
exports.load = texinfo.load;
exports.eval = texinfo.eval;

/*---------------------------------------------------------------------*/
/*    include characters                                               */
/*---------------------------------------------------------------------*/
exports.include = texinfo.include;

/*---------------------------------------------------------------------*/
/*    generators                                                       */
/*---------------------------------------------------------------------*/
exports.css = path.join(path.dirname(__dirname), "hss/texinfo.hss");

/*---------------------------------------------------------------------*/
/*    tag                                                              */
/*---------------------------------------------------------------------*/
exports.TEXINFO = function glop(attr, ... body) {
   if(attr) {
      if("src" in attr) {
	 return texinfo.load(attr.src , attr.charset, attr.fontifier).XML;
      } else {
	 const str = String.prototype.concat.apply("", body);
	 return texinfo.eval(str, attr.charset, attr.fontifier).XML;
      }
   } else {
      const str = String.prototype.concat.apply("", body);
      return texinfo.eval(str).XML;
   }
}

/*---------------------------------------------------------------------*/
/*    language compiler (pre-processor)                                */
/*---------------------------------------------------------------------*/
function compiler(ifile, ofile=undefined) {
   return {
      type: "value",
      value: texinfo.loadDocument(ifile)
   }
}

exports[ Symbol.compiler ] = compiler;
