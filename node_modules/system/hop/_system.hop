;*=====================================================================*/
;*    .../prgm/project/hop/hop/node_modules/system/lib/_system.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sun Jan 17 07:28:50 2021                          */
;*    Last change :  Wed May 29 10:22:14 2024 (serrano)                */
;*    Copyright   :  2021-24 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Hop native JS system implementation                              */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _systime

   (library hopscript hop nodejs)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   
   (define res-cmap
      (js-strings->cmap '#("status" "data")))
   
   (define (str-array->list array %this)
      (map! (lambda (s) (js-tostring s %this))
	 (js-iterable->list array %this)))
   
   (define (process-sync this array resolve reject)
      (let* ((l (str-array->list array %this))
	     (p (apply run-process (if (pair? l) (car l) "true")
		   :wait #t :output :pipe :error :pipe
		   (if (pair? l) (cdr l) '())))
	     (o (process-output-port p))
	     (e (process-error-port p)))
	 (let loop ((lines '()))
	    (let ((l (read-line-newline o)))
	       (if (eof-object? l)
		   (begin
		      (close-input-port o)
		      (process-wait p)
		      (let* ((err (read-string e))
			     (status  (process-exit-status p))
			     (data (if (pair? lines)
				       (js-stringlist->jsstring
					  (reverse! lines))
				       (js-undefined))))
			 (close-input-port e)
			 (if (=fx status 0)
			     (resolve data)
			     (reject (instantiateJsObject
					(cmap res-cmap)
					(__proto__ (js-object-proto %this))
					(elements (vector status (js-string->jsstring err))))))))
		   (loop (cons l lines)))))))

   (&with!
      (with-access::JsGlobalObject %this (__proto__ worker)
	 
	 (define exports (js-get module (& "exports") %this))
	 
	 ;; bind the module in the systime scope
	 (js-put! scope (& "module") module #f %this)
	 
	 ;; system
	 (js-bind! %this exports (& "system")
	    :value (js-make-function %this
		      (lambda (this array resolve reject)
			 (with-access::WorkerHopThread worker (keep-alive)
			    (let ((old-keep-alive keep-alive))
			       (set! keep-alive #t)
			       (thread-start!
				  (instantiate::hopthread
				     (body (lambda ()
					      (process-sync this array
						 (lambda (x)
						    (set! keep-alive old-keep-alive)
						    (js-worker-exec worker "system"
						       (lambda (%this)
							  (js-call1 %this resolve (js-undefined) x))))
						 (lambda (x)
						    (set! keep-alive old-keep-alive)
						    (js-worker-exec worker "system"
						       (lambda (%this)
							  (js-call1 %this reject (js-undefined) x))))))))))))
		      (js-function-arity 3 0)
		      (js-function-info :name "system" :len 3))
	    :writable #f
	    :enumerable #f)

	 ;; systemSync
	 (js-bind! %this exports (& "systemSync")
	    :value (js-make-function %this
		      (lambda (this array)
			 (process-sync this array
			    (lambda (x) x) (lambda (x) x)))
		      (js-function-arity 1 0)
		      (js-function-info :name "systemSync" :len 1))
	    :writable #f
	    :enumerable #f))))

;*---------------------------------------------------------------------*/
;*    The return value for dynamic-load                                */
;*---------------------------------------------------------------------*/
hopscript

