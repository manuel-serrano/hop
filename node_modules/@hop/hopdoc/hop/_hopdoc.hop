;*=====================================================================*/
;*    .../prgm/project/hop/hop/node_modules/hopdoc/hop/_hopdoc.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Thu Jul 30 08:19:26 2015                          */
;*    Last change :  Fri Jan 31 07:02:16 2025 (serrano)                */
;*    Copyright   :  2015-25 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP helpers for hopdoc                                           */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _hopdoc
   
   (library hopscript hop hopwidget nodejs)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)
   
   (js-export (include)
      
      (define exports (js-get %module (& "exports") %this))
      
      (define (skip-blanks lines)
	 (cond
	    ((null? lines)
	     lines)
	    ((string-null? (car lines))
	     (skip-blanks (cdr lines)))
	    ((char=? (string-ref (car lines) 0) #\Newline)
	     (skip-blanks (cdr lines)))
	    ((char=? (string-ref (car lines) 0) #\Return)
	     (skip-blanks (cdr lines)))
	    (else
	     lines)))
      
      (define (include-file path beg end)
	 (let ((file (js-jsstring->string path)))
	    (if (and (not (number? beg)) (not (number?  end)))
		(call-with-input-file file read-string)
		(call-with-input-file file
		   (lambda (ip)
		      (let ((beg (if (number? beg) (js-tointeger beg %this) 1))
			    (end (if (number? end) (js-tointeger end %this) -1)))
			 (let loop ((i 1)
				    (acc '()))
			    (let ((line (read-line-newline ip)))
			       (cond
				  ((eof-object? line)
				   (js-stringlist->jsstring
				      (skip-blanks (reverse! acc))))
				  ((=fx i end)
				   (js-stringlist->jsstring
				      (reverse! (cons line acc))))
				  ((>=fx i beg)
				   (loop (+fx i 1) (cons line acc)))
				  (else
				   (loop (+fx i 1) acc)))))))))))

      (define include
	 (js-make-function %this
	    (lambda (this path beg end)
	       (include-file path beg end))
	    (js-function-arity 3 0)
	    (js-function-info :name "include" :len 3)))
      
      (js-bind! %this exports (& "include")
	 :value include
	 :writable #f
	 :enumerable #f)))
	 
