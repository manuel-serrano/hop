/*=====================================================================*/
/*    .../project/hop/hop/node_modules/markdown/hop/markdown.mjs       */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Sun Jul  6 06:11:11 2014                          */
/*    Last change :  Tue Jul 23 19:00:13 2024 (serrano)                */
/*    Copyright   :  2014-24 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    HOP markdown parser/generator                                    */
/*=====================================================================*/
"use hopscript"

/*---------------------------------------------------------------------*/
/*    Bigloo module clause to spawn hopjs MARKDOWN initialization      */
/*---------------------------------------------------------------------*/
import * as path from "node:path";
import * as markdown from "./_markdown.hop";

/*---------------------------------------------------------------------*/
/*    XML tags                                                         */
/*---------------------------------------------------------------------*/
export const H1 = markdown["MARKDOWN:H1"];
export const H2 = markdown["MARKDOWN:H2"];
export const H3 = markdown["MARKDOWN:H3"];
export const H4 = markdown["MARKDOWN:H4"];
export const H5 = markdown["MARKDOWN:H5"];
export const CODE = markdown["MARKDOWN:CODE"];
export const PRE = markdown["MARKDOWN:PRE"];
export const LI = markdown["MARKDOWN:LI"];
export const UL = markdown["MARKDOWN:UL"];
export const OL = markdown["MARKDOWN:OL"];
export const HR = markdown["MARKDOWN:HR"];
export const P = markdown["MARKDOWN:P"];
export const A = markdown["MARKDOWN:A"];
export const STRONG = markdown["MARKDOWN:STRONG"];
export const BLOCKQUOTE = markdown["MARKDOWN:BLOCKQUOTE"];
export const IMG = markdown["MARKDOWN:IMG"];

exports.H1 = H1;
exports.H2 = H2;
exports.H3 = H3;
exports.H4 = H4;
exports.H5 = H5;
exports.CODE = CODE;
exports.PRE = PRE;
exports.LI = LI;
exports.UL = UL;
exports.OL = OL;
exports.HR = HR;
exports.P = P;
exports.A = A;
exports.STRONG = STRONG;
exports.BLOCKQUOTE = BLOCKQUOTE;
exports.IMG = IMG;

/*---------------------------------------------------------------------*/
/*    parser ...                                                       */
/*---------------------------------------------------------------------*/
export const load = markdown.load;
export const eval = markdown.eval;
export const loadDocument = markdown.loadDocument;

exports.load = load;
exports.eval = eval;
exports.loadDocument = loadDocument;

/*---------------------------------------------------------------------*/
/*    include characters                                               */
/*---------------------------------------------------------------------*/
export const include = markdown.include;
exports.include = markdown.include;

/*---------------------------------------------------------------------*/
/*    generators                                                       */
/*---------------------------------------------------------------------*/
export const css = path.join(path.dirname(__dirname), "hss/markdown.hss");
exports.css = css;

/*---------------------------------------------------------------------*/
/*    toMdString ...                                                   */
/*---------------------------------------------------------------------*/
function toMdString(body) {
   const toStr = el => {
      if (typeof el === "xml-element") {
	 return "${" + hop.compileXML(el) + "}";
      } else {
	 return el.toString();
      }
   };
   return String.prototype.concat.apply("", body.map(toStr));
}

/*---------------------------------------------------------------------*/
/*    tag                                                              */
/*---------------------------------------------------------------------*/
export const MARKDOWN = function MARKDOWN(attr, ... body) {
   if(attr) {
      if("src" in attr) {
	 return markdown.load(attr.src, attr.charset, attr.fontifier).XML;
      } else {
	 return markdown.eval(toMdString(body), attr.charset, attr.fontifier).XML;
      }
   } else {
      return markdown.eval(toMdString(body)).XML;
   }
}
exports.MARKDOWN = MARKDOWN;

/*---------------------------------------------------------------------*/
/*    language compiler (pre-processor)                                */
/*---------------------------------------------------------------------*/
function compiler(ifile, ofile=undefined) {
   return {
      type: "value",
      value: markdown.loadDocument(ifile)
   }
}

exports[Symbol.compiler] = compiler;

