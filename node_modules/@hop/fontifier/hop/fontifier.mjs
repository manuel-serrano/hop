/*=====================================================================*/
/*    .../project/hop/hop/node_modules/fontifier/hop/fontifier.mjs     */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Tue Dec 16 18:30:44 2014                          */
/*    Last change :  Tue Jul 23 15:19:49 2024 (serrano)                */
/*    Copyright   :  2014-24 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    HOP fontifier                                                    */
/*=====================================================================*/
"use hopscript";

/*---------------------------------------------------------------------*/
/*    Bigloo module clause to spawn hopjs FONTIFIER initialization     */
/*---------------------------------------------------------------------*/
import * as path from "node:path";
import * as fs from "node:fs";
import * as fontifier from "./_fontifier.hop";

/*---------------------------------------------------------------------*/
/*    Fontifiers                                                       */
/*---------------------------------------------------------------------*/
export const c = fontifier.c;
export const asm = fontifier.asm;
export const javascript = fontifier.js;
export const hopscript = fontifier.hopscript;
export const typescript = fontifier.typescript;
export const json = fontifier.json;
export const hiphop = fontifier.hiphop;
export const hss = fontifier.hss;
export const hop = fontifier.hop;
export const scheme = fontifier.hop;
export const ebnf = fontifier.ebnf;
export const plain = fontifier.plain;
export const sh = fontifier.sh;
export const xml = fontifier.xml;
export const tex = fontifier.tex;
export const mermaid = fontifier.mermaid;
export const lineNumber = fontifier.lineNumber;

export const css = path.join(path.dirname(__dirname), "hss/fontifier.hss");

exports.c = c;
exports.asm = asm;
exports.javascript = javascript;
exports.hopscript = hopscript;
exports.typescript = typescript;
exports.json = json;
exports.hiphop = hiphop;
exports.hss = hss;
exports.hop = hop;
exports.scheme = scheme;
exports.ebnf = ebnf;
exports.plain = plain;
exports.sh = sh;
exports.xml = xml;
exports.tex = tex;
exports.mermaid = mermaid;
exports.lineNumber = lineNumber;

exports.css = css;

/*---------------------------------------------------------------------*/
/*    getTarget ...                                                    */
/*---------------------------------------------------------------------*/
function getTarget(file) {
   const cache = path.join(require(hop.config).cacheDir, "fontifier");

   if(!fs.existsSync(cache)) {
      fs.mkdirSync(cache);
   } else if(!fs.statSync(cache).isDirectory) {
      throw `Not a directory ${cache}`;
   }

   return path.join(cache, path.basename(file, "js") +  "fontifier.js");
}

/*---------------------------------------------------------------------*/
/*    Symbol.compiler ...                                              */
/*---------------------------------------------------------------------*/
exports[Symbol.compiler] = (file, options) => {
   const fd = fs.openSync(file, "r");
   try {
      const data = fs.readFileSync(file, "utf8");
      const target = (options && options.target)
	 || getTarget(file);
      
      fs.writeFileSync(target, data.replace(/#[^#]*#/g, ""));
      
      return {
	 type: "filename",
	 value: target, 
      };
   } catch(err) {
      return {
	 type: "error",
	 value: err
      }
   } finally {
      fs.closeSync(fd);
   }
}
