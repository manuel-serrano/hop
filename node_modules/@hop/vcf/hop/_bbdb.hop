;*=====================================================================*/
;*    serrano/prgm/project/hop/hop/node_modules/vcf/lib/_bbdb.hop      */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Thu Sep  6 15:19:35 2018                          */
;*    Last change :  Wed May 29 10:18:05 2024 (serrano)                */
;*    Copyright   :  2018-24 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    bbdb Hop parser                                                  */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module bbdb
   (library hopscript hop nodejs web mail)
   (export (hopscript %this this %scope %module)))

;*---------------------------------------------------------------------*/
;*    vcard<=? ...                                                     */
;*---------------------------------------------------------------------*/
(define (vcard<=? x y)
   (with-access::vcard x ((xn familyname)
			  (xf firstname))
      (with-access::vcard y ((yn familyname)
			     (yf firstname))
	 (let ((xn (if (string? xn) xn "~"))
	       (xf (if (string? xf) xf "~"))
	       (yn (if (string? yn) yn "~"))
	       (yf (if (string? yf) yf "~")))
	    (cond
	       ((string<? xn yn) #t)
	       ((string>? xn yn) #f)
	       ((string<=? xf yf) #t)
	       ((string>? xf yf) #f)
	       (else #t))))))
      
;*---------------------------------------------------------------------*/
;*    bbdb-parse-format ...                                            */
;*---------------------------------------------------------------------*/
(define (bbdb-parse-format port)
   (let loop ()
      (let ((line (read-line port)))
	 (if (eof-object? line)
	     (raise
		(instantiate::&io-parse-error
		   (proc "bbdb")
		   (msg "premature end of file")
		   (obj (input-port-name port))))
	     (cond
		((pregexp-match ";;; file-format: ([0-9]+)" line)
		 =>
		 (lambda (fmt) (string->number (cadr fmt))))
		((pregexp-match "[(][ \t]*" line)
		 (unread-string! line port))
		(else
		 (loop)))))))
   
;*---------------------------------------------------------------------*/
;*    load-bbdb ...                                                    */
;*---------------------------------------------------------------------*/
(define (load-bbdb port %this)
   
   (define (xfield alist key def)
      (if (eq? alist 'nil)
	  def
	  (let ((c (assq key alist)))
	     (if (pair? c) (cdr c) def))))

   (define (addr->plist addr)
      (if (pair? addr)
	  (match-case addr
	     ((?label ?street ?city ?pobox ?zip ?country)
	      `(label: ,label
		  :street ,(if (pair? street) (list->vector street) '#())
		  :city ,city :pobox ,pobox :zip ,zip :country ,country))
	     (else
	      #f))
	  #f))

   (define (emails->list emails replyto label)
      (map (lambda (email)
	      (let ((rpt (when (pair? replyto) (assoc email replyto)))
		    (lbl (when (pair? label) (assoc email label))))
		 (cond
		    ((and (not rpt) (not lbl))
		     email)
		    ((not rpt)
		     `(:email ,email :label ,(cdr lbl)))
		    ((not lbl)
		     `(:email ,email :replyto ,(cdr rpt)))
		    (else
		     `(:email ,email :replyto ,(cdr rpt) :label ,(cdr lbl))))))
	 emails))
   
   (define (bbdb9-parse-record rec)
      (match-case rec
	 ((?firstname ?familyname
	     ?affix ?aka ?org ?phones
	     ?addrs ?emails ?xfields ?uid ?cdate ?stamp ?-)
	  (let ((replyto (xfield xfields 'replyto #f))
		(label (xfield xfields 'elabel #f)))
	     (instantiate::vcard
		(uid uid)
		(familyname (if (eq? familyname 'nil) #f familyname))
		(firstname (if (eq? firstname 'nil) #f firstname))
		(nickname (if (eq? aka 'nil) #f (if (pair? aka) (car aka) aka)))
		(org (if (eq? org 'nil) #f org))
		(emails (if (eq? emails 'nil) '() (emails->list emails replyto label)))
		(phones (if (eq? phones 'nil) '() phones))
		(addresses (if (eq? addrs 'nil) '() (filter-map addr->plist addrs)))
		(url (xfield xfields 'url #f))
		(photo (xfield xfields 'face #f))
		(related (xfield xfields 'signature #f))
		(lang (xfield xfields 'language #f))
		(key (xfield xfields 'pkey #f))
		(x-color (xfield xfields 'color #f))
		(xx-extras (cons*
			      (cons 'cdate cdate)
			      (cons 'stamp stamp)
			      (if (pair? xfields)
				  (filter (lambda (k)
					     (not (memq (car k)
						     '(url face signature
						       color language pkey))))
				     xfields)
				  '()))))))
	 (else
	  (bbdb6-parse-record rec))))
   
   (define (bbdb6-parse-record rec)
      (match-case rec
	 ((?firstname ?familyname
	     ?aka ?org ?phones ?addrs ?emails ?notes . ?-)
	  (instantiate::vcard
	     (familyname (if (eq? familyname 'nil) #f familyname))
	     (firstname (if (eq? firstname 'nil) #f firstname))
	     (nickname (if (eq? aka 'nil) #f aka))
	     (org (if (eq? org 'nil) #f org))
	     (emails (if (eq? emails 'nil) '() emails))
	     (phones (if (eq? phones 'nil) '() phones))))
	 (else
	  '())))
   
   (let* ((fmt (bbdb-parse-format port))
	  (cards (map (if (>= fmt fmt 9)
			  bbdb9-parse-record
			  bbdb6-parse-record)
		    (read port))))
      (js-vector->jsarray (sort (list->vector cards) vcard<=?) %this)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*    -------------------------------------------------------------    */
;*    This is the function called by JavaScript when the Hop module    */
;*    is required. It binds the exports field of the newly             */
;*    allocated module                                                 */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)
   (with-access::JsGlobalObject %this (js-object)
      (let ((exports (js-new0 %this js-object)))
         (js-put! %module (& "exports") exports #f %this)
         ;; load
         (js-put! exports (& "load")
            (js-make-function %this
               ;; wrap the Hop read-csv records function into a JS function
               (lambda (this url)
		  (call-with-input-file (js-tostring url %this)
		     (lambda (port)
			(load-bbdb port %this))))
	       (js-function-arity 1 0)
	       (js-function-info :name "load" :len 1))
	    #f %this)
	 exports)))
