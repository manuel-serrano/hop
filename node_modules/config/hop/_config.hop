;*=====================================================================*/
;*    .../prgm/project/hop/hop/node_modules/config/hop/_config.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Jun 19 13:21:01 2015                          */
;*    Last change :  Fri May 16 12:59:02 2025 (serrano)                */
;*    Copyright   :  2015-25 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Hop config manager                                               */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _config

   (eval (import hop-srfis))
      
   (library hopscript hop hopwidget nodejs)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    bind-eval-param! ...                                             */
;*---------------------------------------------------------------------*/
(define-macro (bind-eval-param! %this exports type id accessor . mutator)
   `(let ((get (with-handler
		  (lambda (e)
		     ,(case type
			((string) '(lambda () ""))
			((string-or-bool) '(lambda () #f))
			((symbol) '(lambda () '_))
			((string-array) '(lambda () '#()))
			((bool) '(lambda () #f))
			((obj) '(lambda () (js-undefined)))
			((integer) '(lambda () 0))
			((procedure) '(lambda l (js-undefined)))
			(else (error "bind-param!" "unsupported type" type))))
		  (eval ',accessor)))
	  (set ,(when (pair? mutator)
		   `(with-handler
		       (lambda (e)
			  (lambda (v) (js-undefined)))
		       (eval ',(car mutator))))))
       (js-bind! ,%this ,exports (& ,(symbol->string id))
	  :get (js-make-function %this
		  (lambda (this)
		     ,(case type
			 ((string)
			  '(js-string->jsstring (get)))
			 ((string-or-bool)
			  '(let ((v (get)))
			    (if (string? v) (js-string->jsstring v) v)))
			 ((symbol)
			  '(js-string->jsstring (symbol->string (get))))
			 ((string-array)
			  '(let ((v (map js-string->jsstring (get))))
			    (js-vector->jsarray (list->vector v) %this)))
			 ((bool obj integer)
			  '(get))
			 ((procedure)
			  `(js-make-function %this
			      (lambda (this . l)
				 (apply (get) l))
			      (function-arity 0 -1 'scheme)
			      (js-function-info :name ,(symbol->string accessor)
				 :len 1)))
			 (else
			  (error "bind-param!" "unsupported type" type))))
		  (js-function-arity 0 0)
		  (js-function-info :name ,(symbol->string id) :len 0))
	  :set ,(when (pair? mutator)
		   `(js-make-function %this
		       (lambda (o v)
			  ,(case type
			      ((string)
			       `(set
				   (js-tostring v %this)))
			      ((string-or-bool)
			       `(set
				   (if (boolean? v) v (js-tostring v %this))))
			      ((symbol)
			       `(set
				   (string->symbol (js-tostring v %this))))
			      ((integer)
			       `(set
				   (js-tointeger v %this)))
			      ((bool)
			       `(set
				   (js-totest v)))
			      ((string-array)
			       `(set
				   (map! (lambda (s) (js-tostring s %this))
				      (jsarray->list v %this))))
			      ((procedure)
			       `(set
				   (lambda l
				      (js-apply %this v (js-undefined) l))))
			      (else
			       `(set v))))
		       (js-function-arity 1 0)
		       (js-function-info :name ,(symbol->string id) :len 1)))
	  :writable ,(pair? mutator)
	  :configurable #f
	  :enumerable #t)))

;*---------------------------------------------------------------------*/
;*    bind-param! ...                                                  */
;*---------------------------------------------------------------------*/
(define-macro (bind-param! %this exports type id accessor . mutator)
   `(js-bind! ,%this ,exports (& ,(symbol->string id))
       :get (js-make-function %this
	       (lambda (this)
		  ,(case type
		      ((string)
		       `(js-string->jsstring (,accessor)))
		      ((string-or-bool)
		       `(let ((v (,accessor)))
			   (if (string? v) (js-string->jsstring v) v)))
		      ((symbol)
		       `(js-string->jsstring (symbol->string (,accessor))))
		      ((string-array)
		       `(let ((v (map js-string->jsstring (,accessor))))
			   (js-vector->jsarray (list->vector v) %this)))
		      ((bool obj integer)
		       `(,accessor))
		      ((procedure)
		       `(js-make-function %this
			   (lambda (this . l)
			      (apply (,accessor) l))
			   (js-function-arity 0 -1 'scheme)
			   (js-function-info :name ,(symbol->string accessor)
			      :len 1)))
		      (else
		       (error "bind-param!" "unsupported type" type))))
	       (js-function-arity 0 0)
	       (js-function-info :name ,(symbol->string id) :len 0))
       :set ,(when (pair? mutator)
		`(js-make-function %this
		    (lambda (o v)
		       ,(case type
			   ((string)
			    `(,(car mutator)
			      (js-tostring v %this)))
			   ((string-or-bool)
			    `(,(car mutator)
				(if (boolean? v) v (js-tostring v %this))))
			   ((symbol)
			    `(,(car mutator)
			      (string->symbol (js-tostring v %this))))
			   ((integer)
			    `(,(car mutator)
			      (js-tointeger v %this)))
			   ((bool)
			    `(,(car mutator)
			      (js-totest v)))
			   ((string-array)
			    `(,(car mutator)
			      (map! (lambda (s) (js-tostring s %this))
				 (jsarray->list v %this))))
			   ((procedure)
			    `(,(car mutator)
			      (lambda l (js-apply %this v (js-undefined) l))))
			   (else
			    `(,(car mutator) v))))
		    (js-function-arity 1 0)
		    (js-function-info :name ,(symbol->string id) :len 1)))
       :writable ,(pair? mutator)
       :configurable #f
       :enumerable #t))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)

   (&with!
      (let ((exports (js-get module (& "exports") %this)))
	 
	 ;; configure
	 (bind-param! %this exports string etcDir
	    hop-etc-directory)
	 (bind-param! %this exports string shareDir
	    hop-share-directory)
	 (bind-param! %this exports string iconsDir
	    hop-icons-directory)
	 (bind-param! %this exports string docDir
	    hop-doc-directory)
	 (bind-param! %this exports string binDir
	    hop-bin-directory)
	 (bind-param! %this exports string libDir
	    hop-lib-directory)
	 (bind-param! %this exports string contribsDir
	    hop-contribs-directory)
	 (bind-param! %this exports string webletsDir
	    hop-weblets-directory)
	 (bind-param! %this exports string modulesDir
	    (lambda ()
	       (make-file-path (hop-lib-directory)
		  "hop" (hop-version) "node_modules")))
	 (bind-param! %this exports string cacheDir
	    hop-cache-directory)

	 ;; build
	 (bind-param! %this exports string buildId
	    hop-build-id)
	 (bind-param! %this exports string buildTag
	    hop-build-tag)
	 
	 ;; charset
	 (bind-param! %this exports symbol locale
	    hop-locale hop-locale-set!)
	 (bind-param! %this exports symbol charset
	    hop-charset hop-charset-set!)
	 
	 ;; path
	 (bind-param! %this exports string-array path
	    hop-path hop-path-set!)
	 (bind-param! %this exports string rcDirectory
	    hop-rc-directory hop-rc-directory-set!)
	 (bind-param! %this exports string-array autoloadPath
	    (lambda () (eval '(hop-autoload-directories))))
	 (js-bind! %this exports (& "addAutoloadDirectory")
	    :value (js-make-function %this
		      (lambda (this path)
			 (with-handler
			    (lambda (e)
			       (js-undefined))
			    ((eval 'hop-autoload-directory-add!)
			     (js-tostring path %this))))
		      (js-function-arity 1 0)
		      (js-function-info :name "addAutoloadDirectory" :len 1))
	    :configurable #f
	    :writable #f
	    :enumerable #f)
	 (js-bind! %this exports (& "addHzRepository")
	    :value (js-make-function %this
		      (lambda (this path)
			 (hop-hz-repositories-add! (js-tostring path %this)))
		      (js-function-arity 1 0)
		      (js-function-info :name "addHzRepository" :len 1))
	    :configurable #f
	    :writable #f
	    :enumerable #f)
	 (bind-param! %this exports string schemeRuntime
	    (lambda ()
	       (make-file-name (hop-share-directory)
		  (format "hop_s-~a.js" (hop-version)))))
	 (bind-param! %this exports string schemeRuntimeGz
	    (lambda ()
	       (make-file-name (hop-share-directory)
		  (format "hop_s-~a.js.gz" (hop-version)))))
	 
	 ;; runtime options and state
	 (bind-param! %this exports integer debug
	    bigloo-debug bigloo-debug-set!)
	 (bind-param! %this exports string preferredLanguage
	    hop-preferred-language hop-preferred-language-set!)
	 (bind-param! %this exports obj currentThread
	    current-thread)
	 
	 (bind-eval-param! %this exports integer maxThreads
	    hop-max-threads hop-max-threads-set!)
	 
	 ;; server configuration
	 (bind-param! %this exports bool enableKeepAlive
	    hop-enable-keep-alive hop-enable-keep-alive-set!)
	 (bind-eval-param! %this exports bool enableWebdav
	    hop-enable-webdav hop-enable-webdav-set!)
	 (bind-param! %this exports string-array serverAliases
	    hop-server-aliases hop-server-aliases-set!)
	 (bind-param! %this exports symbol HTTPAuthentication
	    hop-http-authentication hop-http-authentication-set!)
	 
	 ;; proxy
	 (bind-eval-param! %this exports string proxyIpMask
	    hop-proxy-ip-mask hop-proxy-ip-mask-set!)
	 (bind-param! %this exports bool enableProxying
	    hop-enable-proxying hop-enable-proxying-set!)
	 (bind-param! %this exports string-or-bool proxy
	    hop-use-proxy hop-use-proxy-set!)
	 (bind-eval-param! %this exports bool proxyAuthentication
	    hop-proxy-authentication hop-proxy-authentication-set!)
	 (bind-eval-param! %this exports bool proxyAllowRemoteClient
	    hop-proxy-allow-remote-client hop-proxy-allow-remote-client-set!)
	 (bind-eval-param! %this exports bool proxyRemoteAuthentication
	    hop-proxy-remote-authentication hop-proxy-remote-authentication-set!)
	 
	 ;; filtering
	 (bind-param! %this exports procedure serviceAccessControl
	    hop-service-access-control hop-service-access-control-set!)
	 (bind-param! %this exports procedure pathAccessControl
	    hop-path-access-control hop-path-access-control-set!)
	 
	 ;; HTTPS
	 (bind-eval-param! %this exports string HTTPSPrivateKey
	    hop-https-pkey hop-https-pkey-set!)
	 (bind-eval-param! %this exports string HTTPSCertificate
	    hop-https-cert hop-https-cert-set!)
	 
	 ;; xmlBackend
	 (js-bind! %this exports (& "xmlBackend")
	    :get (js-make-function %this
		    (lambda (this)
		       (with-access::xml-backend (hop-xml-backend) (id)
			  (js-string->jsstring (symbol->string id))))
		    (js-function-arity 0 0)
		    (js-function-info :name "xmlBackend" :len 0))
	    :set (js-make-function %this
		    (lambda (this v)
		       (hop-xml-backend-set!
			  (string->symbol (js-tostring v %this))))
		    (js-function-arity 1 0)
		    (js-function-info :name "xmlBackend" :len 1))
	    :configurable #f
	    :writable #t
	    :enumerable #t)
	 ;; ports
	 (js-bind! %this exports (& "HTTPPort")
	    :get (js-make-function %this
		    (lambda (this)
		       (when (>=fx (hop-port) 0) (hop-port)))
		    (js-function-arity 0 0)
		    (js-function-info :name "HTTPPort" :len 0))
	    :configurable #f
	    :writable #f
	    :enumerable #t)
	 (js-bind! %this exports (& "HTTPSPort")
	    :get (js-make-function %this
		    (lambda (this)
		       (when (>=fx (hop-ssl-port) 0) (hop-ssl-port)))
		    (js-function-arity 0 0)
		    (js-function-info :name "HTTPSPort" :len 0))
	    :configurable #f
	    :writable #f
	    :enumerable #t)
	 
	 ;; bigloo configuration
	 (with-access::JsGlobalObject %this (js-object)
	    (let ((bgl (js-new0 %this js-object)))
	       (for-each (lambda (e)
			    (js-bind! %this bgl
			       (js-string->name (symbol->string! (car e)))
			       :value (js-obj->jsobject (cdr e) %this)
			       :configurable #f
			       :writable #f
			       :enumerable #t))
		  (bigloo-config))
	       (js-bind! %this exports (& "bigloo")
		  :value bgl
		  :configurable #f
		  :writable #f
		  :enumerable #t))))))
