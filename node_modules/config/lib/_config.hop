;*=====================================================================*/
;*    .../project/hop/3.1.x/node_modules/config/lib/_config.hop        */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Jun 19 13:21:01 2015                          */
;*    Last change :  Fri Sep 16 15:28:03 2016 (serrano)                */
;*    Copyright   :  2015-16 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Hop config manager                                               */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _config
   
   (library hopscript hop hopwidget nodejs)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    bind-param! ...                                                  */
;*---------------------------------------------------------------------*/
(define-macro (bind-param! %this exports type id accessor . mutator)
   `(js-bind! ,%this ,exports ',id
       :get (js-make-function %this
	       (lambda (this)
		  ,(case type
		      ((string)
		       `(js-string->jsstring (,accessor)))
		      ((symbol)
		       `(js-string->jsstring (symbol->string (,accessor))))
		      ((string-array)
		       `(let ((v (map js-string->jsstring (,accessor))))
			   (js-vector->jsarray (list->vector v) %this)))
		      ((bool obj integer)
		       `(,accessor))
		      ((procedure)
		       `(js-make-function %this
			  (lambda (this . l)
			     (apply (,accessor) l))
			  -1
			  ',accessor))
		      (else
		       (error "bind-param!" "unsupported type" type))))
	       0 ',id)
       :set ,(when (pair? mutator)
	       `(js-make-function %this
		   (lambda (o v)
		      ,(case type
			  ((string)
			   `(,(car mutator)
			     (js-tostring v %this)))
			  ((symbol)
			   `(,(car mutator)
			     (string->symbol (js-tostring v %this))))
			  ((integer)
			   `(,(car mutator)
			     (js-tointeger v %this)))
			  ((bool)
			   `(,(car mutator)
			     (js-totest v)))
			  ((string-array)
			   `(,(car mutator)
			     (map! (lambda (s) (js-tostring s %this))
				(jsarray->list v %this))))
			  ((procedure)
			   `(,(car mutator)
			     (lambda l (js-apply %this v (js-undefined) l))))
			  (else
			   `(,(car mutator) v))))
		   1 ',id))
       :writable ,(pair? mutator)
       :configurable #f
       :enumerable #t))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (let ((exports (js-get module 'exports %this)))
      
      ;; configure
      (bind-param! %this exports string etcDir
	 hop-etc-directory)
      (bind-param! %this exports string shareDir
	 hop-share-directory)
      (bind-param! %this exports string iconsDir
	 hop-icons-directory)
      (bind-param! %this exports string docDir
	 hop-doc-directory)
      (bind-param! %this exports string binDir
	 hop-bin-directory)
      (bind-param! %this exports string libDir
	 hop-lib-directory)
      (bind-param! %this exports string contribsDir
	 hop-contribs-directory)
      (bind-param! %this exports string webletsDir
	 hop-weblets-directory)
      (bind-param! %this exports string modulesDir
	 (lambda ()
	    (make-file-path (hop-lib-directory)
	       "hop" (hop-version) "node_modules")))

      ;; charset
      (bind-param! %this exports symbol locale
	 hop-locale hop-locale-set!)
      (bind-param! %this exports symbol charset
	 hop-charset hop-charset-set!)
	 
      ;; path
      (bind-param! %this exports string-array path
	 hop-path hop-path-set!)
      (js-bind! %this exports 'addAutoloadDirectory
	 :value (js-make-function %this
		   (lambda (this path)
		      (hop-autoload-directory-add! (js-string->jsstring path)))
		   1 'addAutoloadDirectory)
	 :configurable #f
	 :writable #f
	 :enumerable #f)
      (js-bind! %this exports 'addHzRepository
	 :value (js-make-function %this
		   (lambda (this path)
		      (hop-hz-repositories-add! (js-string->jsstring path)))
		   1 'addHzRepository)
	 :configurable #f
	 :writable #f
	 :enumerable #f)
      
      ;; runtime options and state
      (bind-param! %this exports bool debug
	 bigloo-debug bigloo-debug-set!)
      (bind-param! %this exports string preferredLanguage
	 hop-preferred-language hop-preferred-language-set!)
      (bind-param! %this exports obj currentThread
	 current-thread)

      (bind-param! %this exports integer maxThreads
	 hop-max-threads hop-max-threads-set!)
	 
      ;; server configuration
      (bind-param! %this exports bool enableKeepAlive
	 hop-enable-keep-alive hop-enable-keep-alive-set!)
      (bind-param! %this exports bool enableWebdav
	 hop-enable-webdav hop-enable-webdav-set!)
      (bind-param! %this exports string-array serverAliases
	 hop-server-aliases hop-server-aliases-set!)
      (bind-param! %this exports symbol HTTPAuthentication
	 hop-http-authentication hop-http-authentication-set!)

      ;; filtering
      (bind-param! %this exports procedure serviceAccessControl
	 hop-service-access-control hop-service-access-control-set!)
      (bind-param! %this exports procedure pathAccessControl
	 hop-path-access-control hop-path-access-control-set!)
      
      ;; HTTPS
      (bind-param! %this exports string HTTPSPrivateKey
	 hop-https-pkey hop-https-pkey-set!)
      (bind-param! %this exports string HTTPSCertificate
	 hop-https-cert hop-https-cert-set!)
      
      ;; xmlBackend
      (js-bind! %this exports 'xmlBackend
	 :get (js-make-function %this
		 (lambda (this)
		    (with-access::xml-backend (hop-xml-backend) (id)
		       (js-string->jsstring (symbol->string id))))
		 0 'xmlBackend)
	 :set (js-make-function %this
		 (lambda (this v)
		    (hop-xml-backend-set!
		       (string->symbol (js-tostring v %this))))
		 1 'xmlBackend)
	 :configurable #f
	 :writable #t
	 :enumerable #t)
      ;; ports
      (js-bind! %this exports 'HTTPPort
	 :get (js-make-function %this
		 (lambda (this)
		    (if (hop-enable-https)
			(js-undefined)
			(hop-port)))
		 0 'HTTPPort)
;* 	 :set (js-make-function %this                                  */
;* 		 (lambda (this v)                                      */
;* 		    (hop-enable-https-set! #f)                         */
;* 		    (hop-port-set! (js-tointeger v %this)))            */
;* 		 1 'HTTPPort)                                          */
	 :configurable #f
	 :writable #f
	 :enumerable #t)
      (js-bind! %this exports 'HTTPSPort
	 :get (js-make-function %this
		 (lambda (this)
		    (if (hop-enable-https)
			(hop-port)
			(js-undefined)))
		 0 'HTTPSPort)
;* 	 :set (js-make-function %this                                  */
;* 		 (lambda (this v)                                      */
;* 		    (hop-enable-https-set! #t)                         */
;* 		    (hop-port-set! (js-tointeger v %this)))            */
;* 		 1 'HTTPSPort)                                         */
	 :configurable #f
	 :writable #f
	 :enumerable #t)))

