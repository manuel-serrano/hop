/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/vcf/lib/vcf.js         */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Wed Feb  3 17:42:55 2021                          */
/*    Last change :  Thu Feb 17 11:14:00 2022 (serrano)                */
/*    Copyright   :  2021-22 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    vCard management.                                                */
/*=====================================================================*/
"use hopscript";

/*---------------------------------------------------------------------*/
/*    imports                                                          */
/*---------------------------------------------------------------------*/
const fs = require("fs");
const _vcf = require("./_vcf.hop");
const _bbdb = require("./_bbdb.hop");
const _utils = require(hop.utils);

/*---------------------------------------------------------------------*/
/*    vCard ...                                                        */
/*---------------------------------------------------------------------*/
export class vCard {
   constructor(vcard) {
      if (_vcf.isVCard.call(vcard)) {
      	 this.version = _vcf.version.call(vcard);
      	 this.uid = _vcf.uid.call(vcard);
      	 this.familyname = _vcf.familyname.call(vcard);
      	 this.firstname = _vcf.firstname.call(vcard);
      	 this.nickname = _vcf.nickname.call(vcard);
      	 this.emails = _vcf.emails.call(vcard);
      	 this.phones = _vcf.phones.call(vcard);
      	 this.addresses = _vcf.addresses.call(vcard);
      	 this.photo = _vcf.photo.call(vcard);
      	 this.url = _vcf.url.call(vcard);
      	 this.birthday = _vcf.birthday.call(vcard);
      	 this.sound = _vcf.sound.call(vcard);
      	 this.lang = _vcf.lang.call(vcard);
      	 this.related = _vcf.related.call(vcard);
      	 this.color = _vcf.color.call(vcard);
      	 this.thumbnail = _vcf.thumbnail.call(vcard);
      	 this.key = _vcf.key.call(vcard);
      	 this.notes = _vcf.notes.call(vcard);
      	 this.extras = _vcf.extras.call(vcard);
      } else {
	 this.version = "2.1";
      	 this.uid = _utils.genuuid();
      	 this.familyname = undefined;
      	 this.firstname = undefined;
      	 this.nickname = undefined;
      	 this.emails = [];
      	 this.phones = [];
      	 this.addresses = [];
      	 this.photo = undefined;
      	 this.url = undefined;
      	 this.birthday = undefined;
      	 this.sound = undefined;
      	 this.lang = undefined;
      	 this.related = undefined;
      	 this.color = undefined;
      	 this.thumbnail = undefined;
      	 this.key = undefined;
      	 this.notes = [];
      	 this.extras = {};
      }
   }
}

/*---------------------------------------------------------------------*/
/*    loadVCF ...                                                      */
/*---------------------------------------------------------------------*/
export function loadVCF(file, options = undefined) {
   return _vcf.load(file).map(vc => new vCard(vc));
}

/*---------------------------------------------------------------------*/
/*    loadBBDB ...                                                     */
/*---------------------------------------------------------------------*/
export function loadBBDB(file, options = undefined) {
   return _bbdb.load(file).map(vc => new vCard(vc));
}

/*---------------------------------------------------------------------*/
/*    load ...                                                         */
/*---------------------------------------------------------------------*/
export function load(file, options = undefined) {
   if (file.match(/.vcf$/)) {
      return loadVCF(file, options);
   } else if (file.match(/.bbdb$/)) {
      return loadBBDB(file, options);
   } else {
      return loadVCF(file, options);
   }
}

/*---------------------------------------------------------------------*/
/*    parse ...                                                        */
/*---------------------------------------------------------------------*/
function parse(str) {
   return new vCard(_vcf.parse(str));
}

/*---------------------------------------------------------------------*/
/*    constants                                                        */
/*---------------------------------------------------------------------*/
const addrProps = 
   [ "pobox", "ext", "street", "city", "region", "zip", "country" ];

/*---------------------------------------------------------------------*/
/*    splitLines ...                                                   */
/*---------------------------------------------------------------------*/
function splitLines(prelude, data) {
   const dlen = data.length;
   let i = 74 - prelude.length;
   let str = data.substring(0, i);
   
   for(; i < dlen; i += 73) {
      str += "\n ";
      str += data.substring(i, i + 73);
   }
   
   return str;
}

/*---------------------------------------------------------------------*/
/*    photoToString ...                                                */
/*---------------------------------------------------------------------*/
function photoToString(photo) {
   let str = "PHOTO;ENCODING=";
   const data = photo.data;

   str += photo.encoding;
   str += ";";
   str += photo.format;       
   str += ":";
   
   str += splitLines(str, data);
   
   return str + "\n";
}

/*---------------------------------------------------------------------*/
/*    toVCARD ...                                                      */
/*---------------------------------------------------------------------*/
export function toVCARD(vcard) {
   let str = "BEGIN:VCARD\n";

   // VERSION:
   if (vcard.url) {
      str += "VERSION:";
      str += vcard.version;
      str += ";\n";
   } else {
      str += "VERSION:2.1\n";
   }
   
   // UID:
   if (vcard.uid) {
      str += "UID:";
      str += vcard.uid;
      str += "\n";
   }
   
   // FN: & N:
   if (vcard.familyname || vcard.firstname) {
      str += "FN:";
      if (vcard.familyname) {
	 str += vcard.familyname;
	 str += " "
      }
      if (vcard.firstname) {
	 str += vcard.firstname;
      }
      str += "\n";
      
      str += "N:;";
      if (vcard.familyname) {
	 str += vcard.familyname;
	 str += ";"
      }
      if (vcard.firstname) {
	 str += vcard.firstname;
	 str += ";"
      }
      str += ";;\n"
   }
   
   // NICKNAME:
   if (vcard.nickname) {
      str += "NICKNAME:";
      str += vcard.nickname;
      str += "\n";
   }
   
   // TEL:
   for(let i = 0; i < vcard.phones.length; i++) {
      if (vcard.phones[ i ].number) {
	 str += "TEL;";
	 str += vcard.phones[ i ].label;
	 str += ":";
	 str += vcard.phones[ i ].number;
	 str += "\n";
      }
   }
   
   // EMAIL:
   for(let i = 0; i < vcard.emails.length; i++) {
      const email = vcard.emails[i];
      if (email.email) {
	 str += "EMAIL;";
	 
	 str += "LABEL=";
	 str += email.label;
	 
	 if (email.replyto) {
	    str += ";REPLYTO=";
	    str += email.replyto;
	 }
	 
	 str += ":";
	 str += email.email;
	 str += "\n";
      }
   }
   
   // ADR:
   for (let i = 0; i < vcard.addresses.length; i++) {
      const addr = vcard.addresses[i];
      if (addr.street) {
	 str += "ADR;";
	 str += addr.label;
	 str += ":";
	 for (let p of addrProps) {
	    if (addr[p]) {
	       str += addr[p];
	    }
	    str += ";";
	 }
	 
	 str += "\n";
      }
   }

   // URL:
   if (vcard.url) {
      str += "URL:";
      str += vcard.url;
      str += ";\n";
   }
   
   // LANG:
   if (vcard.lang) {
      str += "LANG:";
      str += vcard.lang;
      str += ";\n";
   }
   
   // PHOTO:
   if (vcard.photo) {
      str += photoToString(vcard.photo);
   }
   
   // RELATED:
   if (vcard.related) {
      str += "RELATED:";
      str += vcard.related;
      str += ";\n";
   }
   
   // KEY:
   if (vcard.key) {
      str += "KEY:";
      str += vcard.key;
      str += ";\n";
   }
   
   // X-COLOR:
   if (vcard.color) {
      str += "X-COLOR:";
      str += vcard.color;
      str += ";\n";
   }
   
   // X-THUMBNAIL:
   if (vcard.thumbnail) {
      str += photoToString(vcard.thumbnail);
   }
   
   // XX-EXTRAS:
   for(let k in vcard.extras) {
      str += k.toUpperCase();
      str += ":";
      str += vcard.extras[ k ];
      str += "\n";
   }
   
   str += "END:VCARD\n";
   
   return str;
}

/*---------------------------------------------------------------------*/
/*    stringOf ...                                                     */
/*---------------------------------------------------------------------*/
function stringOf(str) {
   if (!str) {
      return '""';
   } else if (str.indexOf('"') >= 0) {
      return '"' + str.replace(/"/g, "\\\"") + '"';
   } else {
      return '"' + str + '"';
   }
}
/*---------------------------------------------------------------------*/
/*    bbdb ...                                                         */
/*---------------------------------------------------------------------*/
export function toBBDB(vcard) {
   let str = "[";
   // firstname
   if (vcard.firstname) {
      str += stringOf(vcard.firstname);
      str += " ";
   } else {
      str += '"" ';
   }
   // name
   if (vcard.familyname) {
      str += stringOf(vcard.familyname);
      str += " ";
   } else {
      str += '"" ';
   }
   // affix
   str += "nil "
   // aka
   if (vcard.nickname) {
      str += '(';
      str += stringOf(vcard.nickname);
      str += ') ';
   } else {
      str += 'nil ';
   }
   // org
   if (vcard.org) {
      str += stringOf(vcard.org);
      str += ' ';
   } else {
      str += 'nil ';
   }
   // phones
   if (vcard.phones.length > 0) {
      const phones = vcard.phones;
      const len = phones.length;
      
      str += "(";
      for(let i = 0; i < len; i++) {
	 str += '[';
	 str += stringOf(phones[ i ].label);
	 str += ' "';
	 str += phones[ i ].number;
	 str += ((i < len - 1) ? '"] ' : '"]');
      }
      str += ") ";
   } else {
      str += 'nil ';
   }
   // addresses
   if (vcard.addresses.length > 0) {
      const addresses = vcard.addresses;
      const len = addresses.length;
      
      str += "(";
      for(let i = 0; i < len; i++) {
	 const addr = addresses[ i ];
	 str += '[';
	 str += stringOf(addr.label);
	 
	 // address.street
	 str += ' (';
	 const street = addr.street;
	 
	 for(let j = 0; j < street.length; j++) {
	    str += stringOf(street[ j ]);
	    if (j < street.length - 1) str += " ";
	 }
	 str += ')';
	 
	 // address.city
	 str += ' ';
	 str += stringOf(addr.city);
	 
	 // address.pobox
	 str += ' ';
	 str += stringOf(addr.pobox);
	 
	 // address.zip
	 str += ' ';
	 str += stringOf(addr.zip);
	 
	 // address.coutrny
	 str += ' ';
	 str += stringOf(addr.country);
	 
	 str += ((i < len - 1) ? '] ' : ']');
      }
      str += ") ";
   } else {
      str += 'nil ';
   }
   // email
   if (vcard.emails.length > 0) {
      const emails = vcard.emails;
      
      str += '(';
      
      for(let i = 0; i < emails.length; i++) {
	 str += stringOf(emails[ i ].email);
	 if (i < emails.length - 1) str += " ";
      }
      str += ') ';
   } else {
      str += 'nil ';
   }
   // xfields
   str += '(';
   if (vcard.color) { 
      str += '(color . '; str += stringOf(vcard.color); str += ') '; 
   }
   if (vcard.lang) { 
      str += '(language . '; str += stringOf(vcard.lang); str += ') '; 
   }
   if (vcard.key) { 
      str += '(pkey . '; str += stringOf(vcard.key); str += ') '; 
   }
   if (vcard.url) { 
      str += '(url . '; str += stringOf(vcard.url); str += ') '; 
   }
   if (vcard.related) { 
      str += '(signature . '; str += stringOf(vcard.related); str += ') '; 
   }
   
   if (vcard.emails.length > 0) {
      const emails = vcard.emails;
      
      if (emails.find(e => e.label !== "default")) {
	 str += '(elabel . [';
	 for(let i = 0; i < emails.length; i++) {
	    if (emails[ i ].label !== "default") {
	       str += '(' + stringOf(emails[ i ].email);
	       str += ' . ';
	       str += stringOf(emails[ i ].label) + ')';
	       if (i < emails.length - 1) str += ' ';
	    }
	 }
	 str += ']) ';
      }
      	     
      if (emails.find(e => e.replyto)) {
	 str += '(replyto . [';
	 for(let i = 0; i < emails.length; i++) {
	    str += '(' + stringOf(emails[ i ].email);
	    str += ' . ';
	    str += stringOf(emails[ i ].replyto) + ')';
	    if (i < emails.length - 1) str += ' ';
	 }
	 str += ']) ';
      }
   }
   
   if (vcard.extras) {
      const extras = vcard.extras;
      for(let k in extras) {
	 if (k !== "cdate" && k !== "stamp" && k !== "replyto" && k !== "elabel") {
   	    str += '(';
	    str += k;
	    str += ' . ';
	    switch(typeof(extras[ k ])) {
	       case "boolean": 
		  str += (extras[ k ] ? "t" : '()'); 
		  break;
	       case "string": 
		  str += stringOf(extras[ k ]);
		  break;
	       case "pair": 
		  break;
	       default:
		  str += stringOf(extras[ k ].toString());
		  break;
	    }
	    str += ') ';
	 }
      }
   }
   // xfields.photo
   if (vcard.photo) {
      const photo = vcard.photo;
      
      if (photo.url) {
      	 str += '(face . "'; str += photo.url; str += '") '; 
      }
   }
   str += ')';
   // uid
   str += ' "';
   str += vcard.uid;
   str += '"';
   // cdate
   str += ' "';
   if (vcard.extras && vcard.extras.cdate) str += vcard.extras.cdate;
   str += '"';
   // stamp
   str += ' "';
   if (vcard.extras && vcard.extras.stamp) str += vcard.extras.stamp;
   str += '"';
   
   str += " nil]\n";
   
   return str;
}

/*---------------------------------------------------------------------*/
/*    stringify ...                                                    */
/*---------------------------------------------------------------------*/
export function stringify(vcard, format = "vcard") {
   if (format === "bbdb") {
      return toBBDB(vcard);
   } else {
      return toVCARD(vcard);
   }
}

/*---------------------------------------------------------------------*/
/*    Symbol.compiler ...                                              */
/*---------------------------------------------------------------------*/
exports[ Symbol.compiler ] = (file, options) => {
   const val = load(file, options);
   
   if (options && options.target) {
      const fd = fs.openSync(options.target, "w");
      try {
	 const buf = JSON.stringify(val);
	 fs.write(fd, buf, 0, buf.length);
	 
	 return {
	    type: "filename",
	    value: file
	 }
      } finally {
	 fs.closeSync(options.target);
      }
   } else {
      return {
	 type: "value",
	 value: val
      }
   }
}

/*---------------------------------------------------------------------*/
/*    exports                                                          */
/*---------------------------------------------------------------------*/
exports.loadVCF = loadVCF;
exports.loadBBDB = loadBBDB;
exports.load = load;
exports.parse = parse;
exports.vCard = vCard;
exports.toVCARD = toVCARD;
exports.toBBDB = toBBDB;
exports.stringify = stringify;
