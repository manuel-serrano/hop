;*=====================================================================*/
;*    serrano/prgm/project/hop/hop/node_modules/vcf/lib/_vcf.hop       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Thu Sep  6 15:19:35 2018                          */
;*    Last change :  Wed May 29 10:17:25 2024 (serrano)                */
;*    Copyright   :  2018-24 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    vcf Hop parser                                                   */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module vcf
   (library hopscript hop nodejs web mail)
   (export (hopscript %this this %scope %module)))

;*---------------------------------------------------------------------*/
;*    read-vcard                                                       */
;*---------------------------------------------------------------------*/
(cond-expand
   (|bigloo-4.4a|
    (define (read-vcard port)
       (or (port->vcard port) beof)))
   (else
    #unspecified))

;*---------------------------------------------------------------------*/
;*    define-javascript ...                                            */
;*---------------------------------------------------------------------*/
(define-macro (define-javascript proto . body)
   (let* ((id (car proto))
	  (len (-fx (length proto) 2))
	  (name (symbol->string id)))
      `(js-put! exports (& ,name)
	  (js-make-function %this
	     (lambda ,(cdr proto) ,@body)
	     (js-function-arity ,len 0)
	     (js-function-info :name ,name :len ,len))
	  #f %this)))

;*---------------------------------------------------------------------*/
;*    vcard<=? ...                                                     */
;*---------------------------------------------------------------------*/
(define (vcard<=? x y)
   (with-access::vcard x ((xn familyname)
			  (xf firstname))
      (with-access::vcard y ((yn familyname)
			     (yf firstname))
	 (let ((xn (if (string? xn) xn "~"))
	       (xf (if (string? xf) xf "~"))
	       (yn (if (string? yn) yn "~"))
	       (yf (if (string? yf) yf "~")))
	    (cond
	       ((string<? xn yn) #t)
	       ((string>? xn yn) #f)
	       ((string<=? xf yf) #t)
	       ((string>? xf yf) #f)
	       (else #t))))))
      
;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*    -------------------------------------------------------------    */
;*    This is the function called by JavaScript when the Hop module    */
;*    is required. It binds the exports field of the newly             */
;*    allocated module                                                 */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)
   (with-access::JsGlobalObject %this (js-object)
      (let ((exports (js-new0 %this js-object)))
         (js-put! %module (& "exports") exports #f %this)
         ;; load
         (js-put! exports (& "load")
            (js-make-function %this
               ;; wrap the Hop read-csv records function into a JS function
               (lambda (this url)
		  (call-with-input-file url
		     (lambda (port)
			(let loop ((cards '()))
			   (let ((vc (read-vcard port)))
			      (if (eof-object? vc)
				  (js-vector->jsarray
				     (sort (list->vector cards) vcard<=?)
				     %this)
				  (loop (cons vc cards))))))))
	       (js-function-arity 1 0)
	       (js-function-info :name "load" :len 1))
	    #f %this)
	 ;; parse
	 (js-put! exports (& "parse")
            (js-make-function %this
               ;; wrap the Hop read-csv records function into a JS function
               (lambda (this url)
		  (call-with-input-file url
		     (lambda (port)
			(read-vcard port))))
	       (js-function-arity 1 0)
	       (js-function-info :name "parse" :len 1))
	    #f %this)
	 ;; isVCard
	 (define-javascript (isVCard obj)
	    (isa? obj vcard))
	 ;; uid
	 (define-javascript (version vcard)
	    (with-access::vcard vcard (version)
	       (js-obj->jsobject version %this)))
	 ;; uid
	 (define-javascript (uid vcard)
	    (with-access::vcard vcard (uid)
	       (js-obj->jsobject uid %this)))
	 ;; familyName
	 (define-javascript (familyname vcard)
	    (with-access::vcard vcard (familyname)
	       (js-obj->jsobject familyname %this)))
	 ;; firstname
	 (define-javascript (firstname vcard)
	    (with-access::vcard vcard (firstname)
	       (js-obj->jsobject firstname %this)))
	 ;; nickname
	 (define-javascript (nickname vcard)
	    (with-access::vcard vcard (nickname)
	       (js-obj->jsobject nickname %this)))
	 ;; emails
	 (define-javascript (emails vcard)
	    (with-access::vcard vcard (emails)
	       (js-vector->jsarray
		  (list->vector
		     (map (lambda (v)
			     (js-plist->jsobject
				(if (string? v)
				    `(label: "default" :email ,v)
				    v)
				%this))
			emails))
		  %this)))
	 ;; phones
	 (define-javascript (phones vcard)
	    (with-access::vcard vcard (phones)
	       (js-vector->jsarray
		  (list->vector
		     (map (lambda (v)
			     (js-plist->jsobject
				(if (string? v)
				    `(label: "default" :number ,v)
				    `(label: ,(car v) :number ,(cadr v)))
				%this))
			phones))
		  %this)))
	 ;; addresses
	 (define-javascript (addresses vcard)
	    
	    (define (plist-addr? addr)
	       (and (pair? addr) (keyword? (car addr))))
	    
	    (with-access::vcard vcard (addresses)
	       (js-vector->jsarray
		  (list->vector
		     (map (lambda (addr)
			     (cond
				((plist-addr? addr)
				 (js-plist->jsobject addr %this))
				((string? addr)
				 (js-plist->jsobject
				    `(label: "home" :address ,(vector addr))
				    %this))
				(else
				 (js-undefined))))
			addresses))
		  %this)))
	 ;; uid
	 (define-javascript (uid vcard)
	    (with-access::vcard vcard (uid)
	       (js-obj->jsobject uid %this)))
	 ;; org
	 (define-javascript (org vcard)
	    (with-access::vcard vcard (org)
	       (js-obj->jsobject org %this)))
	 ;; photo
	 (define-javascript (photo vcard)
	    (with-access::vcard vcard (photo)
	       (js-photo->jsobject photo %this)))
	 ;; url
	 (define-javascript (url vcard)
	    (with-access::vcard vcard (url)
	       (js-obj->jsobject url %this)))
	 ;; birthday
	 (define-javascript (birthday vcard)
	    (with-access::vcard vcard (birthday)
	       (js-obj->jsobject birthday %this)))
	 ;; sound
	 (define-javascript (sound vcard)
	    (with-access::vcard vcard (sound)
	       (js-obj->jsobject sound %this)))
	 ;; lang
	 (define-javascript (lang vcard)
	    (with-access::vcard vcard (lang)
	       (js-obj->jsobject lang %this)))
	 ;; related
	 (define-javascript (related vcard)
	    (with-access::vcard vcard (related)
	       (js-obj->jsobject related %this)))
	 ;; key
	 (define-javascript (key vcard)
	    (with-access::vcard vcard (key)
	       (js-obj->jsobject key %this)))
	 ;; notes
	 (define-javascript (notes vcard)
	    (with-access::vcard vcard (notes)
	       (js-alist->jsobject notes %this)))
	 ;; color
	 (define-javascript (color vcard)
	    (with-access::vcard vcard (x-color)
	       (js-obj->jsobject x-color %this)))
	 ;; thumbnail
	 (define-javascript (thumbnail vcard)
	    (with-access::vcard vcard (x-thumbnail)
	       (js-photo->jsobject x-thumbnail %this)))
	 ;; extras
	 (define-javascript (extras vcard)
	    (with-access::vcard vcard (xx-extras)
	       (js-alist->jsobject xx-extras %this)))
	 ;; the module exports
	 exports
	 )))

;*---------------------------------------------------------------------*/
;*    js-photo->jsobject ...                                           */
;*---------------------------------------------------------------------*/
(define (js-photo->jsobject photo %this)
   (cond
      ((string? photo)
       (js-plist->jsobject `(:url ,photo) %this))
      ((pair? photo)
       (js-alist->jsobject
	  (cons (cons :data (cdr photo))
	     (filter-map (lambda (v)
			    (cond
			       ((pair? v) v)
			       ((string? v) (cons :format v))
			       ((symbol? v) (cons :format (symbol->string! v)))
			       (else #f)))
		(car photo)))
	  %this))
      (else
       (js-undefined))))

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
hopscript
