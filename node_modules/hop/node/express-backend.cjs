/*=====================================================================*/
/*    .../project/hop/hop/node_modules/hop/node/express-backend.js     */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Tue Feb 27 12:04:16 2024                          */
/*    Last change :  Sat May  4 08:45:29 2024 (serrano)                */
/*    Copyright   :  2024 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    Nodejs Hop backend (lives in the CommonJS land).                 */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    The module                                                       */
/*---------------------------------------------------------------------*/
const http = require("node:http");
const https = require("node:https");
const express = require("express");
const ws = require("ws");
const { existsSync, statSync, readFileSync } = require("node:fs");

/*---------------------------------------------------------------------*/
/*    init ...                                                         */
/*---------------------------------------------------------------------*/
function init(hop, registerWebsocket) {
   const app = express();

   // listen method
   app.listen = () => new Promise((res, rej) => {
      let httpServer = null;
      let httpsServer = null;
      let bcastServer = null;
      
      if (hop.config.ports.http >= 0) {
	 bcastServer = httpServer = http.createServer(app)
	    .listen(hop.config.ports.http, e => {
	       if (e) rej(e);
	       hop.ports.http = httpServer.address().port;
	       listenCallback(res, rej, hop);
	    });
      } else {
	 hop.ports.http = -1;
      }
      if (hop.config.ports.https >= 0) {
	 const credentials = {};
	 for (let k in config.credentials) {
	    credentials[k] = readFileSync(config.credentials[k]);
	 }
	 bcastServer = httpsServer = https.createServer(credentials, app)
	    .listen(hop.config.ports.https, e => {
	       if (e) rej(e);
	       hop.ports.https = e ? -1 : httpsServer.address().port;
	       listenCallback(res, rej, hop);
	    });
      } else {
	 hop.ports.https = -1;
	 listenCallback(res, rej, hop);
      }

      // websocket for event broadcast
      const wsServer = new ws.Server({ noServer: true });
      bcastServer.on('upgrade', (req, socket, head) => {
	 const i = req.rawHeaders.findIndex(n => n.toLowerCase() === "host");
	 if (i < 0) {
	    throw "Cannot register websocket, because cannot find host";
	 } else {
	    const host = req.rawHeaders[i + 1];
	    wsServer.handleUpgrade(req, socket, head, socket => {
	       registerWebsocket(host, socket);
	    });
	 }
      });
   });
   
   // default static for hop-client module
   app.use("/hop/0", express.static(__dirname));

   // hop resolver
   app.static = (id, root) => {
      app.use(`/hop/${id}`, express.static(root, { dotfiles: "allow" }));
   }

   return app;
}

/*---------------------------------------------------------------------*/
/*    listenCallback ...                                               */
/*---------------------------------------------------------------------*/
function listenCallback(res, rej, hop) {
   if (hop.ports.http !== 0 && hop.ports.https !== 0) {
      Object.freeze(hop.ports);
      if (hop.ports.http !== -1 || hop.ports.https !== -1) {
	 res(hop.ports);
      } else {
	 rej(new Error("Hop: need either an http or https port number"));
      }
   }
}


/*---------------------------------------------------------------------*/
/*    exports                                                          */
/*---------------------------------------------------------------------*/
module.exports = { init };
