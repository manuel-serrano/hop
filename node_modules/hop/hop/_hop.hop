;*=====================================================================*/
;*    serrano/prgm/project/hop/hop/node_modules/hop/hop/_hop.hop       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed May  8 08:38:07 2024                          */
;*    Last change :  Sun Jul 21 08:55:03 2024 (serrano)                */
;*    Copyright   :  2024 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    HopJs native implementation                                      */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module __hopjs__hop
   
   (library http hopscript hop nodejs libuv)

   (cond-expand (enable-ssl (library ssl)))

   (static (class Directory
	      (path::bstring read-only)
	      (alias::bstring read-only)))

   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    js-function ...                                                  */
;*---------------------------------------------------------------------*/
(define-macro (js-function id name . size)
   `(js-make-function %this ,id
       (js-function-arity ,id)
       (js-function-info :name ,name :len 0)
       :size ,(if (pair? size) (car size) 1)))
   
;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)
   
   (js-export (createScheduler
		 createServer createServerSSL
		 isSocketServer socketPortNumber
		 addUser
		 Service broadcast
		 HTTPResponseFile HTTPResponseString
		 HTTPResponseAuthentication HTTPResponseHTML
		 static)

      ;; current worker
      (define worker
	 (with-access::JsGlobalObject %this (worker)
 	    worker))

      ;; statics
      (define statics
	 (list (instantiate::Directory
		  (alias "/hop/0")
		  (path (dirname
			   (js-tostring (js-get %module (& "filename") %this)
			      %this))))))

      ;; static-filter
      (define (static-filter req)
	 (when (isa? req http-server-request)
	    (with-access::http-server-request req (abspath method)
	       (when (eq? method 'GET)
		  (let ((dir (find (lambda (d)
				      (with-access::Directory d (alias)
					 (substring=? abspath alias (string-length alias))))
				statics)))
		     (when dir
			(with-access::Directory dir (path alias)
			   (let ((file (string-append path
					  (substring abspath
					     (string-length alias)))))
			      (instantiate::http-response-file
				 (content-type (mime-type file "text/plain"))
				 (file file))))))))))

      ;; service-table
      (define service-table
	 (make-service-table))

      ;; service-filter
      (define service-filter
	 (make-service-filter service-table))
      
      ;; scheduler-accept
      (define (scheduler-accept this serv)
	 (with-access::JsWrapper this (obj data)
	    (set! data
	       (accept-thread %this obj serv))))

      ;; scheduler prototype
      (define sched-cmap
	 (js-make-jsconstructmap))
      (define sched-prototype
	 (with-access::JsGlobalObject %this (js-object)
	    (let ((obj (js-new0 %this js-object)))
	       (js-bind! %this obj (& "accept")
		  :value (js-function scheduler-accept "accept")
		  :writable #f
		  :enumerable #t)
	       obj)))

      ;; adduser
      (define (add-user this user)
	 (let ((name (js-get user (& "name") %this))
	       (pass (js-get user (& "password") %this))
	       (svc (js-get user (& "services") %this))
	       (dir (js-get user (& "directories") %this))
	       (evt (js-get user (& "events") %this)))
	    (add-user! (js-tostring name %this)
	       :password (unless (eq? pass (js-undefined))
			    (js-tostring pass %this))
	       :services (cond
			    ((eq? svc (js-undefined)) #f)
			    ((is-star? svc) '*)
			    ((js-array? svc) (array->symbol-list svc %this))
			    (else '()))
	       :directories (cond
			       ((eq? dir (js-undefined)) #f)
			       ((is-star? dir) '*)
			       ((js-array? dir) (array->string-list dir %this))
			       (else '()))
	       :events (cond
			  ((eq? evt (js-undefined)) #f)
			  ((is-star? evt) '*)
			  ((js-array? evt) (array->string-list evt %this))
			  (else '())))))

      ;; createScheduler
      (define createScheduler
	 (js-function (lambda (this size)
			 (let ((sched (instantiate::JsWrapper
					 (obj (instantiate::pool-scheduler
						 (size size)
						 (filters (list
							     (cons 'first static-filter)
							     (cons 'first service-filter)))
						 (keep-alive-timeout (* 30 1000))
						 (accept-timeout (* 10 1000))))
					 (data service-table)
					 (cmap sched-cmap))))
			    (js-object-proto-set! sched sched-prototype)
			    sched))
	    "createScheduler"))
      
      ;; createServer
      (define createServer
	 (js-function (lambda (this port name somaxconn)
			 (make-server-socket port
			    :name (and (js-jsstring? name) (js-jsstring->string name))
			    :backlog somaxconn))
	    "createServer"))

      ;; createServerSSL
      (define createServerSSL
	 (js-function (lambda (this port name somaxconn cert key)
			 (make-ssl-server-socket port
			    :name (and (js-jsstring? name) (js-jsstring->string name))
			    :backlog somaxconn
			    :protocol 'tlsv1_2
			    :cert (js-jsstring->string cert)
			    :pkey (js-jsstring->string key)))
	    "createServerSSL"))

      ;; isSocketServer
      (define isSocketServer
	 (js-function (lambda (this o) (socket-server? o))
	    "isSocketServer"))

      ;; socketPortNumber
      (define socketPortNumber
	 (js-function (lambda (this o) (socket-port-number o))
	    "socketPortNumber"))

      ;; addUser
      (define addUser
	 (js-function add-user
	    "addUser"))

      ;; Service
      (define Service
	 (js-function (lambda (this proc path)
			 (make-service %this proc
			    (unless (eq? path (js-undefined))
			       (js-tostring path %this))
			    #f #t #f worker service-table this))
	    "Service"))

      ;; broadcast
      (define broadcast
	 (js-function (lambda (this name val)
			 (hop-event-broadcast! (js-tostring name %this) val %this))
	    "broadcast"))

      ;; HTTPResponseFile
      (define HTTPResponseFile
	 (js-function (lambda (this file req)
			 (hopjs-response-file this file req %this))
	    "HTTPResponseFile"))

      ;; HTTPResponseString
      (define HTTPResponseString
	 (js-function (lambda (this string req)
			 (hopjs-response-file this string req %this))
	    "HTTPResponseString"))

      ;; HTTPResponseAuthentication
      (define HTTPResponseAuthentication
	 (js-function (lambda (this string req)
			 (hopjs-response-authentication this string req %this))
	    "HTTPResponseAuthentication"))

      ;; HTTPResponseHTML
      (define HTTPResponseHTML
	 (js-function (lambda (this html req)
			 (hopjs-response-xml this html req %this))
	    "HTTPResponseHTML"))

      ;; static
      (define static
	 (js-function (lambda (this id root)
			 (set! statics
			    (cons (instantiate::Directory
				     (alias (format "/hop/~a" id))
				     (path (js-tostring root %this)))
			       statics)))
	    "static"))

      #unspecified))

;*---------------------------------------------------------------------*/
;*    is-star? ...                                                     */
;*---------------------------------------------------------------------*/
(define (is-star? o)
   (when (js-jsstring? o)
      (string=? (js-jsstring->string o) "*")))

;*---------------------------------------------------------------------*/
;*    accept-thread ...                                                */
;*---------------------------------------------------------------------*/
(define (accept-thread %this sched serv)
   (thread-start!
      (instantiate::hopthread
	 (body (lambda ()
		  (scheduler-accept-loop sched serv #t '()))))))
   
;*---------------------------------------------------------------------*/
;*    make-service ...                                                 */
;*---------------------------------------------------------------------*/
(define (make-service %this::JsGlobalObject impl path loc register import worker::WorkerHopThread table server::JsObject)
   
   (define (source::bstring impl)
      (if (js-function? impl)
	  (or (js-function-path impl) (pwd))
	  (pwd)))
   
   (define (fix-args len)
      (map (lambda (i)
	      (string->symbol (format "a~a" i)))
	 (iota len)))
   
   (define (service-debug id::symbol impl)
      (lambda (%this)
	 (js-service/debug id loc impl %this)))
   
   (define (parse-request %this svc req)
      (with-access::http-request req (path abspath)
	 (service-parse-request svc req)))
   
   (cond
      ((eq? impl (js-undefined))
       (unless (eq? path (js-undefined))
	  (set! path (js-tostring impl %this))))
      ((not (js-procedure? impl))
       (error "service" "not a procedure" impl)))

   (define (handler svc req)
      (js-worker-exec-throws worker path
	 (lambda (%this)
	    (let ((args (hopjs-parse-request %this svc req)))
	       (cond
		  ((null? args)
		   (js-call0 %this impl req))
		  ((vector? args)
		   (js-apply-vec %this impl req args
		      (fixnum->uint32 (vector-length args))))
		  ((js-array? args)
		   (with-access::JsArray args (vec ilen)
		      (js-apply-vec %this impl req vec ilen)))
		  ((js-jsobject? args)
		   (js-call1 %this impl req args))
		  (else
		   (error path
		      (format "Invalid service arguments (~a)"
			 (typeof args))
		      args)))))))
   
   (let* ((path (or path (gen-service-url :public #t)))
	  (hoppath (if (and (>fx (string-length path) 0)
			    (char=? (string-ref path 0) #\/))
		       path
		       (make-file-name (hop-service-base) path)))
	  (src (source impl)))
      (multiple-value-bind (id wid)
	 (service-path->ids path)
	 (letrec* ((svcn (symbol->string! id))
		   (svcp (lambda (this . vals)
			    (with-access::hop-service svc (path)
			       (js-make-hopframe %this server path vals))))
		   (args (if (js-procedure? impl)
			     (fix-args (js-get impl (& "length") %this))
			     '()))
		   (svc (instantiate::hop-service
			   (ctx %this)
			   (proc list)
			   (handler handler)
			   (javascript "HopService(~s, ~s)")
			   (path hoppath)
			   (id id)
			   (wid wid)
			   (args args)
			   (resource (dirname src))
			   (source src))))
	    (js-make-service %this svcp svcn
	       register import
	       (js-function-arity svcp) worker
	       svc
	       table)))))

;*---------------------------------------------------------------------*/
;*    hopjs-parse-request ...                                          */
;*    -------------------------------------------------------------    */
;*    See hopscript/service.scm                                        */
;*---------------------------------------------------------------------*/
(define (hopjs-parse-request %this::JsGlobalObject svc::hop-service req::http-request)
   (with-access::http-request req (query header)
      (cond
	 ((not (string? query))
	  (let ((args (http-header-field header :hopjs-arguments)))
	     (if (string? args)
		 (decode %this req args)
		 (instantiateJsObject
		    (cmap empty-cmap)
		    (__proto__ (js-object-proto %this))
		    (elements '#())))))
	 ((string-prefix? "hop-encoding=hopjs&vals=" query)
	  (decode %this req query))
	 (else
	  (service-parse-request svc req)))))

;*---------------------------------------------------------------------*/
;*    empty-cmap ...                                                   */
;*---------------------------------------------------------------------*/
(define empty-cmap (js-make-jsconstructmap))

;*---------------------------------------------------------------------*/
;*    decode ...                                                       */
;*---------------------------------------------------------------------*/
(define (decode %this req query)

   (define (err req::http-request)
      (with-access::http-request req (path query)
	 (error path "Invalid query" query)))

   (define (js-json-parse text::bstring %this::JsGlobalObject)
      (call-with-input-string text
	 (lambda (ip)
	    (js-json-parser ip (js-undefined) #f #f %this))))
   
   (define (decode-arg req::http-request query::bstring c::char j::long l::long)
      (case c
	 ((#\I)
	  (string->integer query 10 j))
	 ((#\N)
	  (string->real (substring query j (+fx j l))))
	 ((#\S)
	  (let ((v (substring query j (+fx j l))))
	     (js-string->jsstring v)))
	 ((#\s)
	  (let ((v (url-decode (substring query j (+fx j l)))))
	     (js-string->jsstring v)))
	 ((#\D)
	  (let ((v (string->integer query 10 j)))
	     (js-date->jsdate (milliseconds->date v) %this)))
	 ((#\J)
	  (let ((v (substring query j (+fx j l))))
	     (js-json-parse v %this)))
	 ((#\j)
	  (let ((v (url-decode (substring query j (+fx j l)))))
	     (js-json-parse v %this)))
	 (else
	  (err req))))
   
   (define (decode-args req::http-request query::bstring vec::vector i::long)
      (let ((slen (string-length query))
	    (vlen (vector-length vec)))
	 (let loop ((i i)
		    (n 0))
	    (if (=fx i slen)
		(if (=fx n vlen)
		    vec
		    (err req))
		(let ((c (string-ref query i)))
		   (case c
		      ((#\U)
		       (vector-set! vec n (js-undefined))
		       (loop (+fx i 1) (+fx n 1)))
		      ((#\Z)
		       (vector-set! vec n '())
		       (loop (+fx i 1) (+fx n 1)))
		      ((#\T)
		       (vector-set! vec n #t)
		       (loop (+fx i 1) (+fx n 1)))
		      ((#\F)
		       (vector-set! vec n #f)
		       (loop (+fx i 1) (+fx n 1)))
		      (else
		       (if (>fx i (-fx slen 4))
			   (err req)
			   (let ((l (string->integer query 10 (+fx i 1))))
			      (if (not l)
				  (err req)
				  (let ((j (string-index query #\. (+fx i 2))))
				     (cond
					((not j)
					 (err req))
					((>fx (+fx j (+fx 1 l)) slen)
					 (err req))
					(else
					 (vector-set! vec n
					    (decode-arg req query c (+fx j 1) l))
					 (loop (+fx l (+fx j 1))
					    (+fx n 1)))))))))))))))
   
   (let ((i (string-length "hop-encoding=hopjs&vals="))
	 (len (string-length query)))
      (if (>fx i len)
	  (err req)
	  (let ((l (string->integer query 10 i)))
	     (cond
		((not l)
		 (err req))
		((=fx l 0)
		 '#())
		(else
		 (let ((j (string-index query #\. i)))
		    (if (not j)
			(err req)
			(decode-args req query (make-vector l) (+fx j 1))))))))))

;*---------------------------------------------------------------------*/
;*    array->string-list ...                                           */
;*---------------------------------------------------------------------*/
(define (array->string-list arr %this)
   (map! (lambda (v) (js-tostring v %this))
      (vector->list (jsarray->vector arr %this))))

;*---------------------------------------------------------------------*/
;*    array->symbol-list ...                                           */
;*---------------------------------------------------------------------*/
(define (array->symbol-list arr %this)
   (map! string->symbol (array->string-list arr %this)))

