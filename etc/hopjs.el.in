;; -*- mode: lisp -*-
;*=====================================================================*/
;*    serrano/prgm/project/hop/3.1.x/etc/hopjs.el.in                   */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sun May 25 13:05:16 2014                          */
;*    Last change :  Wed Nov  9 08:11:55 2016 (serrano)                */
;*    Copyright   :  2014-16 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOPJS customization of the standard js-mode                      */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The package                                                      */
;*---------------------------------------------------------------------*/
(provide 'hopjs)
(require 'json)
(require 'js)

;*---------------------------------------------------------------------*/
;*    constants ...                                                    */
;*---------------------------------------------------------------------*/
(defconst hopjs-version "@VERSION@")

;*---------------------------------------------------------------------*/
;*    configuration                                                    */
;*---------------------------------------------------------------------*/
(defcustom hopjs-indent-level-html 2
  "Number of spaces for each indentation step in `js-mode'."
  :type 'integer
  :safe 'integerp
  :group 'js)

(defcustom hopjs-doc-dir "@DOCDIR@"
  "The main directory containing the documentation indexes"
  :type 'string
  :safe 'stringp
  :group 'hopjs)

(defcustom hopjs-doc-extra-dir
  (list "~/.config/hop/weblets")
  "Directories containing the extra documentation indexes"
  :type '(repeat (string))
  :group 'hopjs)

(defcustom hopjs-navigator "firefox"
  "The navigator to access the documentation"
  :type 'string
  :safe 'stringp
  :group 'hopjs)

(defcustom hopjs-special-tags
  '("link" "LINK" "input" "INPUT" "meta" "META" "img" "IMG")
  "The special HTML tag that have no close tag"
  :type '(repeat (string))
  :group 'hopjs)

(defcustom hopjs-html-doc-url "http://www.w3.org/TR/html4"
  "The base URL of the HTML4.01 documentation"
  :type 'string
  :safe 'stringp
  :group 'hopjs)

(defcustom hopjs-mdn-doc-url "https://developer.mozilla.org"
  "Mozilla Developper Network base URL"
  :type 'string
  :safe 'stringp
  :group 'hopjs)
  
;*---------------------------------------------------------------------*/
;*    font-lock-make-face ...                                          */
;*---------------------------------------------------------------------*/
(defun font-lock-make-face (l)
  (let ((fname (car l))
	(color (car (cdr l)))
	(italic (car (cdr (cdr l))))
	(bold (car (cdr (cdr (cdr l))))))
    (let ((face (copy-face 'default fname)))
      (if color
	  (set-face-foreground face color))
      (if italic
	  (make-face-italic face))
      (if bold
	  (make-face-bold face))
      face)))

;*---------------------------------------------------------------------*/
;*    My personal faces                                                */
;*---------------------------------------------------------------------*/
(defvar font-lock-face-hopjs0
  (font-lock-make-face (list 'font-lock-face-hopjs0 "gray50" nil t)))
(defvar font-lock-face-hopjs1
  (font-lock-make-face (list 'font-lock-face-hopjs1 "slateblue3" nil t)))
(defvar font-lock-face-hopjs2
  (font-lock-make-face (list 'font-lock-face-hopjs2 "blue" nil t)))
(defvar font-lock-face-hopjs3
  (font-lock-make-face (list 'font-lock-face-hopjs3 "tomato2" nil t)))
(defvar font-lock-face-hopjs4
  (font-lock-make-face (list 'font-lock-face-hopjs4 "green3" nil t)))
(defvar font-lock-face-hopjs5
  (font-lock-make-face (list 'font-lock-face-hopjs5 "red" nil t)))
(defvar font-lock-face-hopjs6
  (font-lock-make-face (list 'font-lock-face-hopjs6 "BlueViolet" nil t)))
(defvar font-lock-face-hopjs7
  (font-lock-make-face (list 'font-lock-face-hopjs7 "green3" nil t)))
(defvar font-lock-face-hopjs8
  (font-lock-make-face (list 'font-lock-face-hopjs8 "Goldenrod" nil t)))
(defvar font-lock-face-hopjs9
  (font-lock-make-face (list 'font-lock-face-hopjs9 "#87910F" nil t)))
(defvar font-lock-face-hopjs10
  (font-lock-make-face (list 'font-lock-face-hopjs10 "lightslateblue" nil nil)))
(defvar font-lock-face-hopjs11
  (font-lock-make-face (list 'font-lock-face-hopjs11 "Orchid" nil t)))

;*---------------------------------------------------------------------*/
;*    Highlighting                                                     */
;*---------------------------------------------------------------------*/
(defface hopjs-nomatch-face
  '((((class color)) (:background "Red"))
    (t (:weight bold)))
  "Face used for marking a nomatched tag."
  :group 'hopjs)

(defface hopjs-match-face
  '((((class color)) (:background "Green"))
    (t (:weight bold)))
  "Face used for marking a matched tag."
  :group 'hopjs)

(defface hopjs-doc-face
  '((((class color)) (:background "Yellow" :underline t))
    (t (:underline t)))
  "Face used for marking a document entry."
  :group 'hopjs)

(defvar hopjs-tag-overlays nil)

;*---------------------------------------------------------------------*/
;*    tooltip ...                                                      */
;*---------------------------------------------------------------------*/
(defvar hopjs-tooltip-map (make-sparse-keymap))
;; mouse-2
(define-key hopjs-tooltip-map[(mouse-2)]
  (function hopjs-doc-entry))

;*---------------------------------------------------------------------*/
;*    global state                                                     */
;*---------------------------------------------------------------------*/
(defvar hopjs-doc-index-table
  (make-vector 27 '()))

(defvar hopjs-indexes
  '())

;*---------------------------------------------------------------------*/
;*    hopjs-mode-hook ...                                              */
;*---------------------------------------------------------------------*/
(defun hopjs-mode-hook ()
  ;; syntax
  (hopjs-syntax)
  ;; key bindings
  (hopjs-key-bindings)
  ;; font lock
  (font-lock-add-keywords nil hopjs-font-lock-keywords)
  ;; custom beginning of defun
  ;; (setq beginning-of-defun-function 'hopjs-beginning-of-defun)      */
  ;; (setq end-of-defun-function 'hopjs-end-of-defun)
  ;; index
  (run-at-time "1 sec" nil 'hopjs-load-indexes)
  (run-at-time "1 sec" nil 'hopjs-load-node-modules-indexes)
  ;; tag matching
  (add-hook 'post-command-hook (function hopjs-post-command-hook) t t)
  ;; user hooks
  (run-hooks 'hopjs-mode-hook))

;*---------------------------------------------------------------------*/
;*    hopjs-load-repo-indexes ...                                      */
;*---------------------------------------------------------------------*/
(defun hopjs-load-repo-indexes (p)
  ;; load all the idx.json files located in XXX/doc directory under P
  (let ((path (expand-file-name p)))
    (when (file-directory-p path)
      (mapc #'(lambda (d)
		(let* ((dir (concat path "/" d "/doc"))
		       (idx (concat dir "/idx.json")))
		  (when (file-exists-p idx)
		    (hopjs-load-index idx dir hopjs-doc-index-table))))
	    (directory-files path)))))

;*---------------------------------------------------------------------*/
;*    hopjs-load-indexes ...                                           */
;*---------------------------------------------------------------------*/
(defun hopjs-load-indexes ()
  (hopjs-load-index
   (concat hopjs-doc-dir "/idx.json") nil hopjs-doc-index-table)
  (hopjs-load-index
   (concat hopjs-doc-dir "/html-idx.json") hopjs-html-doc-url hopjs-doc-index-table)
  (hopjs-load-index
   (concat hopjs-doc-dir "/mdn-idx.json") hopjs-mdn-doc-url hopjs-doc-index-table)
  (mapc 'hopjs-load-repo-indexes hopjs-doc-extra-dir))

;*---------------------------------------------------------------------*/
;*    hopjs-load-node-modules-indexes ...                              */
;*---------------------------------------------------------------------*/
(defun hopjs-load-node-modules-indexes ()
  (let ((dir default-directory)
	(count 5))
    (while (and (file-directory-p dir) (not (equal dir "//")) (> count 0))
      (let ((nm (concat dir "node_modules")))
	(when (file-directory-p nm) (hopjs-load-repo-indexes nm))
	(setq dir (expand-file-name (concat dir "../")))
	(setq count (1- count))))
    (let ((nm (expand-file-name "~/.node_modules")))
      (when (file-directory-p nm)
	(hopjs-load-repo-indexes nm)))))
  
;*---------------------------------------------------------------------*/
;*    hopjs-load-index ...                                             */
;*---------------------------------------------------------------------*/
(defun hopjs-load-index (file base table)
  (unless (member file hopjs-indexes)
    (when (file-exists-p file)
      (message "hopjs.el: loading index %s" file)
      (let* ((i 0)
	     (v (json-read-file file))
	     (len (length v)))
	(while (< i len)
	  (let* ((en (aref v i))
		 (k (assq 'key en))
		 (y (assq 'type en))
		 (n (string-match (cdr k) "[^.]+$"))
		 (c (aref (cdr k) (or n 0)))
		 (m (cond
		     ((and (>= c ?A) (<= c ?Z)) (- c ?A))
		     ((and (>= c ?a) (<= c ?z)) (- c ?a))
		     (t 27))))
	    (when (and (consp y) (string-equal (cdr y) "tag"))
	      (rplacd k (downcase (cdr k))))
	    (when base
	      (let ((c (assq 'url en)))
		(when (consp c)
		  (rplacd c (concat base "/" (cdr c))))))
	    (aset table m (cons (cons (cdr k) en) (aref table m)))
	    (setq i (+ i 1))))))))
	
;*---------------------------------------------------------------------*/
;*    hopjs-syntax ...                                                 */
;*---------------------------------------------------------------------*/
(defun hopjs-syntax ()
  "Syntax table for `hopjs-mode'."
  (let ((table (syntax-table)))
    (modify-syntax-entry ?\` "\"    " table)
    table))

;*---------------------------------------------------------------------*/
;*    font-lock ...                                                    */
;*---------------------------------------------------------------------*/
(defconst hopjs-font-lock-keywords
  (list (list "\\s-*\\(service\\)\\(?:\\s-+\\|(\\)" 1 'font-lock-keyword-face)
	(list ".\\(\\(?:post\\|then\\|catch\\)\\(?:Sync\\|Message\\)?\\)\\(?:\\s-+\\|(\\)" 1 'font-lock-face-hopjs2)
	(cons "</?[a-zA-Z0-9_.-]+[ ]*>\\|[ ]*/>\\|<[^ /]*/>" 'font-lock-face-hopjs9)
	(list "\\(</?[a-zA-Z0-9_.:-]+\\)[ ]+[a-zA-Z0-9_]" 1 'font-lock-face-hopjs9)
	(cons "<!--\\([^-]\\|-[^-]\\|--[^>]\\)+-[-]+>" 'font-lock-comment-face)
	(list "[}\"][ ]*\\(>\\)" 1 'font-lock-face-hopjs9)
	(cons "$\{[^ \t\r\n{}]*\}" 'font-lock-face-hopjs2)
	(list "\\([$]\\){" 1 'font-lock-face-hopjs2)
	(list "\\([~]\\){" 1 'font-lock-face-hopjs3)
	(cons "[0-9a-zA-Z_-]*:" 'font-lock-face-hopjs10)
	(cons "\\<\\(?:async\\|yield\\|await\\)\\>" 'font-lock-face-hopjs3)
	(list (concat "^\\s-*\\(?:service\\)\\s-+\\(" js--name-re "\\)") 1 'font-lock-function-name-face)))

;*---------------------------------------------------------------------*/
;*    hopjs-key-bindings ...                                           */
;*---------------------------------------------------------------------*/
(defun hopjs-key-bindings ()
  (let ((map (current-local-map)))
    (define-key map "\C-m" 'hopjs-return)
    (define-key map "\e\C-m" 'newline)
    (local-unset-key "\ee")
    (define-key map "\e\C-q" 'hopjs-indent-statement)
    (local-unset-key "}")
    (define-key map "}" 'hopjs-electric-brace)
    (local-unset-key ")")
    (define-key map ")" 'hopjs-electric-paren)
    (local-unset-key ">")
    (define-key map ">" 'hopjs-electric-abra)
    (define-key map "\C-c\C-c" 'hopjs-close-paren-tag)))

;*---------------------------------------------------------------------*/
;*    hopjs-re-open-tag ...                                            */
;*---------------------------------------------------------------------*/
(defconst hopjs-re-open-tag
  "<\\([a-zA-Z_$][a-zA-Z0-9_.:$!-]*\\)\\(?:[ \t\n]*>\\|[ \t\n]+[a-zA-Z0-9_-]\\)")
(defconst hopjs-re-open-tag-attr
  "<\\([a-zA-Z_$][a-zA-Z0-9_.:$!-]*\\)\\(?:[ \t\n]+[a-zA-Z0-9_-]\\)")
(defconst hopjs-re-close-tag
  "</\\([a-zA-Z_$][a-zA-Z0-9_.:$!-]*\\)[ \t]*>")
(defconst hopjs-re-end-tag
  "/>")
(defconst hopjs-re-code
  "{")
(defconst hopjs-re-standalone-tag
  "<\\([^>/\n]\\|/[^>]\\)*/>")

(defconst hopjs-re-entering-var
  (concat "\\(?:var[ \t ]*\\)?[a-zA-Z_$][:.0-9a-zA-Z_$]*[ \t]*=[ \t]*"
	  hopjs-re-open-tag))

(defconst hopjs-re-entering-retun
  (concat "return[ \t]+" hopjs-re-open-tag))

(defconst hopjs-re-entering
  (concat hopjs-re-entering-var "\\|" hopjs-re-entering-retun))

(defconst hopjs-re-entering-html
  "\\(?:var[ \t ]*\\)?[a-zA-Z_$][:.0-9a-zA-Z_$]*[ \t]*[(= ]?[ \t]*<\\(?:[^> \n/]+\\|[^/]>\\)")

(defconst hopjs-re-entering-attr-html
  "\\(?:var[ \t ]*\\)?[a-zA-Z_$][:.0-9a-zA-Z_$]*[ \t]*[(= ]?[ \t]*<\\(?:[^> \n/]+\\)[ \t]+\\([^\n<>]+\\)$")

(defconst hopjs-re-special-tag
  "<\\(link\\|LINK\\)")

(defconst hopjs-re-attribute
  "[a-zA-Z0-9_-]+[ \t]*=")

(defconst hopjs-re-any-tag
  (concat hopjs-re-open-tag
	  "\\|" hopjs-re-close-tag
	  "\\|" hopjs-re-end-tag
	  "\\|" hopjs-re-standalone-tag))
(defconst hopjs-re-tag
  (concat hopjs-re-any-tag
	  "\\|" hopjs-re-code))

;*---------------------------------------------------------------------*/
;*    debugging                                                        */
;*---------------------------------------------------------------------*/
(defun hopjs-debug (fmt &rest l)
  (when hopjs-debug (apply 'message fmt l)))

(defconst hopjs-debug t)

;*---------------------------------------------------------------------*/
;*    call-sans-debug ...                                              */
;*---------------------------------------------------------------------*/
(defun call-sans-debug (f &rest l)
  (let ((dbg hopjs-debug))
    (setq hopjs-debug nil)
    (let ((tmp (apply f l)))
      (setq hopjs-debug dbg)
      tmp)))

;*---------------------------------------------------------------------*/
;*    hopjs-electric-brace ...                                         */
;*---------------------------------------------------------------------*/
(defun hopjs-electric-brace ()
  "Insert and indent line."
  (interactive)
  (insert "}")
  (indent-for-tab-command))

;*---------------------------------------------------------------------*/
;*    hopjs-electric-paren ...                                         */
;*---------------------------------------------------------------------*/
(defun hopjs-electric-paren ()
  "Insert and indent line."
  (interactive)
  (insert ")")
  (indent-for-tab-command))

;*---------------------------------------------------------------------*/
;*    hopjs-electric-abra ...                                          */
;*---------------------------------------------------------------------*/
(defun hopjs-electric-abra ()
  "Insert and indent line."
  (interactive)
  (insert ">")
  (indent-for-tab-command))

;*---------------------------------------------------------------------*/
;*    hopjs-pos-eolp ...                                               */
;*---------------------------------------------------------------------*/
(defun hopjs-pos-eolp (pos)
  (save-excursion
    (goto-char pos)
    (looking-at "\\([^<>]*>\\)?[ \t]*$")))

;*---------------------------------------------------------------------*/
;*    hopjs-pos-bolp ...                                               */
;*---------------------------------------------------------------------*/
(defun hopjs-pos-bolp (pos)
  (save-excursion
    (goto-char pos)
    (back-to-indentation)
    (= (point) pos)))

;*---------------------------------------------------------------------*/
;*    hopjs-blank-line-p ...                                           */
;*---------------------------------------------------------------------*/
(defun hopjs-blank-line-p ()
  (save-excursion
    (beginning-of-line)
    (looking-at "[ \t]*$")))

;*---------------------------------------------------------------------*/
;*    hopjs-same-line-p ...                                            */
;*---------------------------------------------------------------------*/
(defun hopjs-same-line-p (beg pos)
  (when (< beg pos)
    (save-excursion
      (goto-char beg)
      (move-end-of-line 1)
      (let ((eol (point)))
	(when (>= eol pos)
	  (goto-char pos)
	  (move-end-of-line 1)
	  (= (point) eol))))))

;*---------------------------------------------------------------------*/
;*    hopjs-close-paren-tag ...                                        */
;*---------------------------------------------------------------------*/
(defun hopjs-close-paren-tag ()
  "Close parenthesis or tag"
  (interactive)
  (let* ((pe (parse-partial-sexp
	      (point)
	      (save-excursion (hopjs-beginning-of-defun) (point))))
	 (bra (cadr pe))
	 (tag (when (hopjs-html-p (point)) (hopjs-find-opening-tag (point))))
	 (beg (match-beginning 0))
	 (end (match-end 0)))
    (cond
     ((and tag (or (not bra) (> end bra)))
      (cond
       ((hopjs-pos-eolp end)
	;; tag at the beginning of line
	(unless (hopjs-blank-line-p)
	  (indent-for-tab-command)
	  (insert "\n"))
	(insert "</" tag ">")
	(newline-and-indent))
       ((hopjs-pos-bolp beg)
	;; tag at the end of line
	(if (hopjs-same-line-p beg (point))
	    (insert "</" tag ">")
	  (progn
	    (unless (hopjs-blank-line-p)
	      (indent-for-tab-command)
	      (insert "\n"))
	    (insert "</" tag ">")
	    (newline-and-indent))))
       (t
	(insert "</" tag ">"))))
     ((> bra 0)
      ;; no opening tag
      (case (char-after (cadr pe))
	((?{)
	 (when (save-excursion (goto-char (cadr pe)) (looking-at "{[ \t]*$"))
	   (unless (hopjs-blank-line-p)
	     (newline-and-indent)))
	 (hopjs-electric-brace))
	((?\()
	 (when (save-excursion (goto-char (cadr pe)) (looking-at "[(][ \t]*$"))
	   (unless (hopjs-blank-line-p)
	     (newline-and-indent)))
	 (hopjs-electric-paren))
	((?\[) (insert "]")))))))

;*---------------------------------------------------------------------*/
;*    hopjs-indent-statement ...                                       */
;*---------------------------------------------------------------------*/
(defun hopjs-indent-statement ()
  "Indent curent statement."
  (interactive)
  (save-excursion
    (if (hopjs-opening-tag-p (point))
	(if (looking-at hopjs-re-special-tag)
	    (indent-according-to-mode)
	  (let ((beg (point)))
	    (if (hopjs-find-closing-tag (1+ (match-end 0)))
		(let ((end (match-end 0)))
		  (indent-region beg end))
	      (indent-according-to-mode))))
      (progn
	(c-beginning-of-statement
	 0
	 (save-excursion
	   (hopjs-beginning-of-defun)
	   (point))
	 nil)
	(let ((start (point)))
	  (c-forward-sexp)
	  (let ((end (point)))
	    (indent-region start end)))))))

;*---------------------------------------------------------------------*/
;*    hopjs-return ...                                                 */
;*---------------------------------------------------------------------*/
(defun hopjs-return (&optional dummy)
   "On indent automatiquement sur un RET.
usage: (js-return)  -- [RET]"
   (interactive)
   (if (= (point) 1)
       (newline)
     (newline-and-indent)))

;* {*---------------------------------------------------------------------*} */
;* {*    hopjs-beginning-of-defun ...                                     *} */
;* {*---------------------------------------------------------------------*} */
;* (defun hopjs-beginning-of-defun (pos)                               */
;*   (interactive "d")                                                 */
;*   (let ((res 'loop))                                                */
;*     (while (eq res 'loop)                                           */
;*       (beginning-of-defun)                                          */
;*       (let ((defpos (point)))                                       */
;* 	(cond                                                          */
;* 	 ((<= defpos (point-min))                                      */
;* 	  (setq res nil))                                              */
;* 	 ((search-forward "{" pos t)                                   */
;* 	  (forward-char -1)                                            */
;* 	  (condition-case nil                                          */
;* 	      (progn                                                   */
;* 		(forward-sexp 1)                                       */
;* 		(if (> (point) pos)                                    */
;* 		    (progn                                             */
;* 		      (goto-char defpos)                               */
;* 		      (setq res t))                                    */
;* 		  (goto-char defpos)))                                 */
;* 	    (error                                                     */
;* 	     (progn                                                    */
;* 	       (goto-char defpos)                                      */
;* 	       (setq res t)                                            */
;* 	       nil))))                                                 */
;* 	 (t                                                            */
;* 	  (setq res nil)))))                                           */
;*     res))                                                           */
	      
;*---------------------------------------------------------------------*/
;*    hopjs--indent-operator-re ...                                    */
;*---------------------------------------------------------------------*/
(defconst hopjs--indent-operator-re 
  (concat "[-+*/%=&^|?:.]\\([^-+*/]\\|$\\)\\|^<$\\|^>$\\|"
          (js--regexp-opt-symbol '("in" "instanceof")))
  "Regexp matching operators that affect indentation of continued expressions.")

(defun js--looking-at-operator-p ()
  "Return non-nil if point is on a JavaScript operator, other than a comma."
  (save-match-data
    (and (looking-at hopjs--indent-operator-re)
         (or (not (looking-at ":"))
             (save-excursion
               (and (js--re-search-backward "[?:{]\\|\\_<case\\_>" nil t)
                    (looking-at "?")))))))

(defun js--proper-indentation (parse-status)
  "Return the proper indentation for the current line."
  (save-excursion
    (back-to-indentation)
    (cond ((nth 4 parse-status)		; inside comment
	   (js--get-c-offset 'c (nth 8 parse-status)))
	  ((nth 3 parse-status) 0)	; inside string
	  ((eq (char-after) ?#) 0)
	  ((save-excursion (js--beginning-of-macro)) 4)
	  ;; Indent array comprehension continuation lines specially.
	  ((let ((bracket (nth 1 parse-status))
		 beg)
	     (and bracket
		  (not (js--same-line bracket))
		  (setq beg (js--indent-in-array-comp bracket))
		  ;; At or after the first loop?
		  (>= (point) beg)
		  (js--array-comp-indentation bracket beg))))
	  ((js--html-statement-indentation))
	  ((js--ctrl-statement-indentation))
	  ((js--multi-line-declaration-indentation))
	  ((nth 1 parse-status)
	   ;; A single closing paren/bracket should be indented at the
	   ;; same level as the opening statement. Same goes for
	   ;; "case" and "default".
	   (let ((same-indent-p (looking-at "[]})]"))
		 (switch-keyword-p (looking-at "default\\_>\\|case\\_>[^:]"))
		 (continued-expr-p (js--continued-expression-p)))
	     (goto-char (nth 1 parse-status)) ; go to the opening char
	     (if (looking-at "[({[]\\s-*\\(/[/*]\\|$\\)")
		 (progn	 ; nothing following the opening paren/bracket
		   (skip-syntax-backward " ")
		   (when (eq (char-before) ?\)) (backward-list))
		   (back-to-indentation)
		   (let* ((in-switch-p (unless same-indent-p
					 (looking-at "\\_<switch\\_>")))
			  (same-indent-p (or same-indent-p
					     (and switch-keyword-p
						  in-switch-p)))
			  (indent
			   (cond (same-indent-p
				  (current-column))
				 (continued-expr-p
				  (+ (current-column) (* 2 js-indent-level)
				     js-expr-indent-offset))
				 (t
				  (+ (current-column) js-indent-level
				     (pcase (char-after (nth 1 parse-status))
				       (?\( js-paren-indent-offset)
				       (?\[ js-square-indent-offset)
				       (?\{ js-curly-indent-offset)))))))
		     (if in-switch-p
			 (+ indent js-switch-indent-offset)
		       indent)))
	       ;; If there is something following the opening
	       ;; paren/bracket, everything else should be indented at
	       ;; the same level.
	       (unless same-indent-p
		 (forward-char)
		 (skip-chars-forward " \t"))
	       (current-column))))

	  ((js--continued-expression-p)
	   (+ js-indent-level js-expr-indent-offset))
	  (t 0))))

;*---------------------------------------------------------------------*/
;*    hopjs-in-string-comment-p ...                                    */
;*---------------------------------------------------------------------*/
(defun hopjs-in-string-comment-p (pos)
  (memq (get-text-property pos 'face)
	'(font-lock-comment-face font-lock-string-face)))

;*---------------------------------------------------------------------*/
;*    hopjs-eol-pos ...                                                */
;*---------------------------------------------------------------------*/
(defun hopjs-eol-pos ()
  (save-excursion
    (end-of-line)
    (point)))
  
;*---------------------------------------------------------------------*/
;*    hopjs-parse-html-token ...                                       */
;*---------------------------------------------------------------------*/
(defun hopjs-parse-html-token ()
  ;; parse the HTML token at point
  (cond
   ((looking-at hopjs-re-open-tag-attr)
    (let* ((tagname (buffer-substring-no-properties
		     (match-beginning 1) (match-end 1)))
	   (type (if (member tagname hopjs-special-tags)
		     'tag
		   'otag)))
      (vector type
	      (match-beginning 0) (1- (match-end 0))
	      (match-beginning 1) (match-end 1))))
   ((looking-at hopjs-re-open-tag)
    (let* ((tagname (buffer-substring-no-properties
		     (match-beginning 1) (match-end 1)))
	   (type (if (member tagname hopjs-special-tags)
		     'tag
		   'otag)))
      (vector type
	      (match-beginning 0) (match-end 0)
	      (match-beginning 1) (match-end 1))))
   ((looking-at hopjs-re-close-tag)
    (vector 'ctag
	    (match-beginning 0) (match-end 0)))
   ((looking-at hopjs-re-entering-html)
    (vector 'entering
	    (match-beginning 0) (match-end 0)))
   ((looking-at hopjs-re-attribute)
    (vector 'attribute
	    (match-beginning 0) (match-end 0)))
   ((looking-at hopjs-re-end-tag)
    (vector 'end-tag
	    (match-beginning 0) (match-end 0)))
   ((looking-at hopjs-re-standalone-tag)
    (vector 'tag
	    (match-beginning 0) (match-end 0)))
   ((looking-at ">")
    (vector 'end-otag
	    (match-beginning 0) (match-end 0)))
   (t
    (let ((eol (hopjs-eol-pos))
	  (beg (point)))
      (cond
       ((or (re-search-forward hopjs-re-open-tag eol t)
	    (re-search-forward hopjs-re-close-tag eol t)
	    (re-search-forward hopjs-re-end-tag eol t))
	(vector 'blob beg (match-beginning 0)))
       (t
	nil))))))
    
(defun hopjs-pht ()
  (interactive)
  (message "%s" (hopjs-parse-html-token)))

;*---------------------------------------------------------------------*/
;*    hopjs-parse-html-attribute-value ...                             */
;*---------------------------------------------------------------------*/
(defun hopjs-parse-html-attribute-value ()
  ;; parse the HTML attribute value at point
  (cond
   ((looking-at "\"[^\"\n]*\"")
    (vector 'attr-value (match-beginning 0) (match-end 0)))
   ((looking-at "\'[^'\n]*'")
    (vector 'attr-value (match-beginning 0) (match-end 0)))
   ((looking-at "\"[^\"\n]*")
    (vector 'attr-value (match-beginning 0) (match-end 0)))
   ((looking-at "'[^'\n]*")
    (vector 'attr-value (match-beginning 0) (match-end 0)))
   ((looking-at "[a-zA-Z0-9_]+")
    (vector 'attr-value (match-beginning 0) (match-end 0)))
   ((looking-at "[$~]{")
    (let ((eol (hopjs-eol-pos))
	  (beg (match-beginning 0))
	  (end (match-end 0)))
      (goto-char (1+ beg))
      (condition-case nil
	  (save-excursion
	    (let ((forward-sexp-function nil))
	      (forward-sexp 1)
	      (if (> (point) eol)
		  (vector 'attr-value beg eol)
		(vector 'attr-value beg (point)))))
	(error
	 (vector 'attr-value beg eol)))))))

(defun hopjs-pha ()
  (interactive)
  (message "%s" (hopjs-parse-html-attribute-value)))

;*---------------------------------------------------------------------*/
;*    hopjs-parse-html-line ...                                        */
;*---------------------------------------------------------------------*/
(defun hopjs-parse-html-line ()
  ;; parse all HTML tokens of line at point
  (back-to-indentation)
  (let ((res '())
	(tok (hopjs-parse-html-token)))
    (while tok
      (setq res (cons tok res))
      (goto-char (aref tok 2))
      (if (looking-at "[ \t]*")
	  (progn
	    (goto-char (match-end 0))
	    (cl-case (aref tok 0)
	      ((attribute)
	       (setq tok (hopjs-parse-html-attribute-value)))
	      (t
	       (setq tok (hopjs-parse-html-token)))))
	(setq tok nil)))
    res))

(defun hopjs-phl ()
  (interactive)
  (message "%s" (hopjs-parse-html-line)))

;*---------------------------------------------------------------------*/
;*    hopjs-html-p ...                                                 */
;*---------------------------------------------------------------------*/
(defun hopjs-html-p (pos)
  (interactive "d")
  (hopjs-debug ">>> hopjs-html-p pos=%d" pos)
  (unless (hopjs-in-string-comment-p pos)
    (save-excursion
      (let ((loop 'loop)
	    (open 0)
	    (be (progn (hopjs-beginning-of-defun) (point))))
	(hopjs-debug "~~~ hopjs-html-p be=%s" be)
	(hopjs-debug "~~~ hopjs-html-p, loop=%s be=%d" loop be)
	(when (eq loop 'loop)
	  (goto-char be)
	  (while (eq loop 'loop)
	    (if (re-search-forward hopjs-re-tag pos t)
		(let ((next (match-end 0)))
		  (hopjs-debug "--- hopjs-html-p open=%d point=%s next=%d match=\"%s\""
			       open (point) next
			       (buffer-substring-no-properties
				(match-beginning 0) (match-end 0)))
		  (goto-char (match-beginning 0))
		  (cond
		   ((hopjs-in-string-comment-p (point))
		    (hopjs-debug "     (in-comment/string)")
		    (goto-char next))
		   ((looking-at hopjs-re-code)
		    (condition-case ()
			(let ((p (save-excursion (forward-sexp 1) (point))))
			  (hopjs-debug "    (re-code p=%s pos=%s)" p pos)
			  (if (> p pos)
			      (progn
				(setq open 0)
				(forward-char 1))
			    (goto-char p)))
		      (error
		       (cond
			((re-search-forward hopjs-re-open-tag pos t)
			 (setq open (+ open 1))
			 (goto-char (match-end 0)))
			((and (> (point) (point-min))
			      (memq (char-after (1- (point))) '(?$ $~)))
			 ;; an error in parsing, we are creating the code...
			 (setq loop 'code)
			 (setq open 0))
			(t
			 (forward-char 1))))))
		   ((looking-at hopjs-re-open-tag)
		    (setq open (+ open 1))
		    (hopjs-debug "    (re-open-tag)")
		    (goto-char next))
		   ((looking-at hopjs-re-close-tag)
		    (hopjs-debug "    (re-close-tag)")
		    (setq open (- open 1))
		    (goto-char next))
		   ((looking-at hopjs-re-end-tag)
		    (hopjs-debug "    (re-end-tag)")
		    (setq open (- open 1))
		    (goto-char next))
		   ((looking-at hopjs-re-standalone-tag)
		    (hopjs-debug "    (re-standalone-tag)")
		    (goto-char next))
		   (t
		    (forward-char 1)
		    (forward-sexp 1)
		    (hopjs-debug "!!! hopjs-html-p forward=%s" (point)))))
	      (setq loop nil))))
	(hopjs-debug "<<< hopjs-html-p pos=%d open=%s %s -> %s" pos open hopjs-debug
		     (> open 0))
	(> open 0)))))

;*---------------------------------------------------------------------*/
;*    hopjs-column-at ...                                              */
;*---------------------------------------------------------------------*/
(defun hopjs-column-at (pos)
  (goto-char pos)
  (current-column))

;*---------------------------------------------------------------------*/
;*    js--html-statement-indentation ...                               */
;*---------------------------------------------------------------------*/
(defun js--html-statement-indentation ()
  (when (call-sans-debug 'hopjs-html-p (point))
    (message "> js--html-statement-indentation point=%s" (point))
    (let ((pmin (save-excursion (hopjs-beginning-of-defun) (point))))
      (let ((col (save-excursion
		   (beginning-of-line)
		   (back-to-indentation)
		   (hopjs-indent-new-line
		    (if (< (- (point) pmin) 800) pmin (- (point) 800))
		    nil 0)))
	    (col0 (current-column)))
	(message ">> js--html-statement-indentation col=%s" col)
	(if (looking-at "[ \t]*$")
	    ;; empty line
	    col
	  (let ((tokens (last (hopjs-parse-html-line))))
	    (message ">> js--html-statement-indentation tokens=%s" tokens)
	    (if (consp tokens)
		(cl-case (aref (car tokens) 0)
		  ((otag tag attribute)
		   col)
		  ((ctag)
		   (if (hopjs-find-opening-tag (aref (car tokens) 1))
		       (let ((pos (match-beginning 0)))
			 (save-excursion
			   (goto-char pos)
			   (let ((tok (last (hopjs-parse-html-line))))
			     (if (and (consp tok)
				      (eq (aref (car tok) 0) 'entering))
				 (hopjs-column-at (aref (car tok) 1))
			       (hopjs-column-at pos)))))
		     col0))
		  ((attr)
		   col)
		  (t
		   col0))
	      col0)))))))

(defun hopjs-indent ()
    (interactive)
    (js--html-statement-indentation))

;*---------------------------------------------------------------------*/
;*    hopjs-indent-new-line ...                                        */
;*---------------------------------------------------------------------*/
(defun hopjs-indent-new-line (pmin intag depth)
  (let ((pinit (point)))
    (message ">>> hopjs-indent-new-line point=%s" pinit)
    (beginning-of-line)
    (previous-line)
    (if (or (< (point) pmin) (= (point) pinit))
	0
      (let ((tokens (hopjs-parse-html-line))
	    (col nil)
	    (candidate nil)
	    (intag intag)
	    (depth depth))
	(message ">>>> hopjs-indent-new-line tokens=%s" tokens)
	(while (not col)
	  (if (consp tokens)
	      (let ((tok (car tokens)))
		(message ">>>>> hopjs-indent-new-line tok=%s intag=%s"
			 tok intag)
		(cl-case (aref tok 0)
		  ((entering)
		   (let ((ocol (hopjs-column-at (aref tok 1))))
		     (setq col (+ ocol hopjs-indent-level-html))))
		  ((end-otag)
		   (setq intag t)
		   (setq tokens (cdr tokens)))
		  ((end-otag end-tag)
		   (setq intag t)
		   (setq depth (- depth 1))
		   (setq tokens (cdr tokens)))
		  ((attribute)
		   (if intag
		       (setq tokens (cdr tokens))
		     (if (and (consp (cdr tokens))
			      (eq (aref (cadr tokens) 0) 'attr-value))
			 (setq tokens (cdr tokens))
		       (setq col (hopjs-column-at (aref tok 1))))))
		  ((attr-value)
		   (if intag
		       (setq tokens (cdr tokens))
		     (if (and (consp (cdr tokens))
			      (eq (aref (cadr tokens) 0) 'attribute))
			 (setq tokens (cdr tokens))
		       (setq col (hopjs-column-at (aref tok 1))))))
		  ((otag)
		   (let ((c (if (= depth 0)
				(+ (hopjs-column-at (aref tok 1))
				   hopjs-indent-level-html)
			      (hopjs-column-at (aref tok 1)))))
		     (setq intag nil)
		     (if (consp (cdr tokens))
			 (progn
			   (setq candidate c)
			   (setq tokens (cdr tokens)))
		       (setq col c))))
		  ((tag)
		   (setq intag nil)
		   (let ((c (hopjs-column-at (aref tok 1))))
		     (if (consp (cdr tokens))
			 (progn
			   (setq candidate c)
			   (setq tokens (cdr tokens)))
		       (setq col c))))
		  ((ctag)
		   (let ((c (hopjs-column-at (aref tok 1))))
		     (setq depth (- depth 1))
		     (if (consp (cdr tokens))
			 (progn
			   (setq candidate c)
			   (setq tokens (cdr tokens)))
		       (setq col c))))
		  (t
		   (cond
		    ((consp (cdr tokens))
		     (setq tokens (cdr tokens)))
		    (candidate
		     (setq col candidate))
		    (t
		     (setq col (hopjs-indent-new-line pmin intag depth)))))))
	    (cond
	     (candidate
	      (setq col candidate))
	     ((< (point) pinit)
	      (setq col (hopjs-indent-new-line pmin intag depth)))
	     (t (setq col (progn (back-to-indentation) (current-column)))))))
	(message "<<< hopjs-indent-new-line point=%s --> col=%s" pinit col)
	col))))

(defun hopjs-inl ()
  (interactive)
  (let ((pmin (save-excursion (hopjs-beginning-of-defun) (point))))
    (message "%s" (hopjs-indent-new-line pmin nil 0))))

;*---------------------------------------------------------------------*/
;*    hopjs-search-code-regexp ...                                     */
;*---------------------------------------------------------------------*/
(defun hopjs-search-code-regexp (regexp search key)
  (save-excursion
    (let ((res '_)
	  (pos (point)))
      (while (eq res '_)
	(if (funcall search regexp nil t)
	    (let ((beg (match-beginning 0)))
	      (cond
	       ((eq (get-text-property beg 'face) key)
		(setq res t))
	       ((> pos (point))
		;; backward search
		(if (> (point) (point-min))
		    (goto-char (1- beg))
		  (setq res nil)))
	       (t
		;; forward search
		(if (< (point) (point-max))
		    (forward-char)
		  (setq res nil)))))
	  (setq res nil)))
      res)))
      
;*---------------------------------------------------------------------*/
;*    hopjs-search-previous-function ...                               */
;*---------------------------------------------------------------------*/
(defun hopjs-search-previous-function ()
  (when (hopjs-search-code-regexp
	 "\\_<\\(function\\|service\\)\\_>"
	 're-search-backward 
	 'font-lock-keyword-face)
    (let ((beg (match-beginning 0)))
      (goto-char beg)
      (if (hopjs-search-code-regexp "{" 're-search-forward nil)
	  ;; and we have found a open bracket
	  (condition-case nil
	      (progn
		(goto-char (match-beginning 0))
		(forward-sexp 1)
		(cons beg (point)))
	    (error
	     (cons beg beg)))
	;; no bracket found...
	nil))))

;*---------------------------------------------------------------------*/
;*    hopjs-goto-defun ...                                             */
;*---------------------------------------------------------------------*/
(defun hopjs-goto-defun (ref pos)
  (let ((loop t))
    (while loop
      (let ((fun (hopjs-search-previous-function)))
	(cond
	 ((not fun)
	  (goto-char (point-min))
	  (setq loop nil))
	 ((> (cdr fun) pos)
	  (progn
	    (setq loop nil)
	    (goto-char (funcall ref fun))))
	 ((> (car fun) (point-min))
	  (goto-char (1- (car fun))))
	 (t
	  (setq loop nil)))))))

;*---------------------------------------------------------------------*/
;*    hopjs-beginning-of-defun ...                                     */
;*---------------------------------------------------------------------*/
(defun hopjs-beginning-of-defun (&optional arg)
  (unless arg (setq arg 1))
  (while (> arg 0)
    (setq arg (1- arg))
    (hopjs-goto-defun 'car (point))))

;*---------------------------------------------------------------------*/
;*    hopjs-end-of-defun ...                                           */
;*---------------------------------------------------------------------*/
(defun hopjs-end-of-defun (&optional arg)
  (unless arg (setq arg 1))
  (while (> arg 0)
    (setq arg (1- arg))
    (hopjs-goto-defun 'cdr (point))))

;*---------------------------------------------------------------------*/
;*    hopjs-unhighlight-tags ...                                       */
;*---------------------------------------------------------------------*/
(defun hopjs-unhighlight-tags ()
  (while (consp hopjs-tag-overlays)
    (delete-overlay (car hopjs-tag-overlays))
    (setq hopjs-tag-overlays (cdr hopjs-tag-overlays))))

;*---------------------------------------------------------------------*/
;*    hopjs-highlight-tag ...                                          */
;*---------------------------------------------------------------------*/
(defun hopjs-highlight-tag (face beg end)
  (let ((ov (make-overlay beg end nil t nil)))
    (overlay-put ov 'face face)
    (overlay-put ov 'hopjs-tag-overlay t)
    (overlay-put ov 'evaporate t)
    (setq hopjs-tag-overlays (cons ov hopjs-tag-overlays))))

;*---------------------------------------------------------------------*/
;*    hopjs-closing-tag-p ...                                          */
;*---------------------------------------------------------------------*/
(defun hopjs-closing-tag-p (pos)
  (when (and (eq (char-after pos) ?>)
	     (> pos (+ 1 (point-min)))
	     (not (eq (char-after (1- pos)) ?/)))
    (save-excursion
      (when (search-backward "<" nil t 1)
	(and (looking-at hopjs-re-close-tag)
	     (= (match-end 0) (1+ pos)))))))

;*---------------------------------------------------------------------*/
;*    hopjs-opening-tag-p ...                                          */
;*---------------------------------------------------------------------*/
(defun hopjs-opening-tag-p (pos)
  (when (and (eq (char-after pos) ?<) (< pos (- (point-max) 1)))
    (save-excursion
      (when (looking-at hopjs-re-open-tag)
	(let ((tag (buffer-substring-no-properties
		    (match-beginning 1) (match-end 1))))
	  (not (member tag hopjs-special-tags)))))))

;*---------------------------------------------------------------------*/
;*    hopjs-find-opening-tag ...                                       */
;*---------------------------------------------------------------------*/
(defun hopjs-find-opening-tag (pos)
  (save-excursion
    (goto-char pos)
    (let ((depth 1)
	  (res 'loop))
      (while (eq res 'loop)
	(if (re-search-backward hopjs-re-any-tag nil t 1)
	    (progn
	      (unless (hopjs-in-string-comment-p (match-beginning 0))
		(cond
		 ((looking-at hopjs-re-end-tag)
		  ;; we still have to check stand alone tag that are confused
		  ;; with closing tar parts during the re-search
		  (if (save-excursion
			(goto-char (+ (point) 2))
			(let ((pt (point)))
			  (when (re-search-backward
				 hopjs-re-standalone-tag nil t 1)
			    (= (match-end 0) pt))))
		      (goto-char (match-beginning 0))
		    (setq depth (1+ depth))))
		 ((looking-at hopjs-re-close-tag)
		  (setq depth (1+ depth)))
		 (t
		  (looking-at hopjs-re-open-tag)
		  (unless (member (buffer-substring-no-properties
				   (match-beginning 1) (match-end 1))
				  hopjs-special-tags)
		    (if (= depth 1)
			(setq res 
			      (buffer-substring-no-properties
			       (match-beginning 1) (match-end 1)))
		      (setq depth (1- depth))))))))
	  (setq res nil)))
      res)))

;*---------------------------------------------------------------------*/
;*    hopjs-find-closing-tag ...                                       */
;*---------------------------------------------------------------------*/
(defun hopjs-find-closing-tag (pos)
  (save-excursion
    (goto-char pos)
    (let ((depth 1)
	  (res 'loop))
      (while (eq res 'loop)
	(if (re-search-forward hopjs-re-any-tag nil t 1)
	    (let ((beg (match-beginning 0))
		  (end (match-end 0)))
	      (unless (hopjs-in-string-comment-p beg)
		(goto-char beg)
		(cond
		 ((looking-at hopjs-re-standalone-tag)
		  (setq end (match-end 0))
		  nil)
		 ((looking-at hopjs-re-open-tag)
		  (unless (member (buffer-substring-no-properties
				   (match-beginning 1) (match-end 1))
				  hopjs-special-tags)
		    (setq depth (1+ depth))))
		 ((looking-at hopjs-re-end-tag)
		  (if (= depth 1)
		      (setq res 'tag)
		    (setq depth (1- depth))))
		 (t
		  (if (= depth 1)
		      (progn
			(looking-at hopjs-re-close-tag)
			(setq res 
			      (buffer-substring-no-properties
			       (match-beginning 1) (match-end 1))))
		    (setq depth (1- depth))))))
	      (goto-char end))
	  (setq res nil)))
      res)))

;*---------------------------------------------------------------------*/
;*    hopjs-post-command-hook ...                                      */
;*---------------------------------------------------------------------*/
(defun hopjs-post-command-hook ()
  (interactive)
  (hopjs-tag-matching)
  (hopjs-doc-at-point (point)))

;*---------------------------------------------------------------------*/
;*    hopjs-tag-matching ...                                           */
;*---------------------------------------------------------------------*/
(defun hopjs-tag-matching ()
  (interactive)
  (hopjs-unhighlight-tags)
  (cond
   ((hopjs-in-string-comment-p (point))
    nil)
   ((hopjs-closing-tag-p (1- (point)))
    (if (> (point) 3)
	(let* ((tag (buffer-substring-no-properties
		     (match-beginning 1) (match-end 1)))
	       (beg (match-beginning 1))
	       (end (match-end 1))
	       (otag (hopjs-find-opening-tag (match-beginning 0))))
	  (cond
	   ((not otag)
	    (hopjs-highlight-tag 'hopjs-nomatch-face beg end))
	   ((string-equal tag otag)
	    (hopjs-highlight-tag
	     'hopjs-match-face beg end)
	    (hopjs-highlight-tag
	     'hopjs-match-face (match-beginning 1) (match-end 1)))
	   (t
	    (hopjs-highlight-tag
	     'hopjs-nomatch-face beg end)
	    (hopjs-highlight-tag
	     'hopjs-nomatch-face (match-beginning 1) (match-end 1)))))
      (hopjs-unhighlight-tags)))
   ((hopjs-opening-tag-p (point))
    (cond
     ((looking-at hopjs-re-standalone-tag)
      (hopjs-unhighlight-tags))
     ((< (point) (- (point-max) 3))
      (let* ((tag (buffer-substring-no-properties
		   (match-beginning 1) (match-end 1)))
	     (beg (match-beginning 1))
	     (end (match-end 1))
	     (otag (hopjs-find-closing-tag (match-end 0))))
	(cond
	 ((not otag)
	  (hopjs-highlight-tag 'hopjs-nomatch-face beg end))
	 ((eq otag 'tag)
	  t)
	 ((string-equal tag otag)
	  (hopjs-highlight-tag 'hopjs-match-face beg end)
	  (hopjs-highlight-tag
	   'hopjs-match-face (match-beginning 1) (match-end 1)))
	 (t
	  (hopjs-highlight-tag 'hopjs-nomatch-face beg end)
	  (hopjs-highlight-tag
	   'hopjs-nomatch-face (match-beginning 1) (match-end 1))))))
     (t
      (hopjs-unhighlight-tags))))
   (t
    (hopjs-unhighlight-tags))))

;*---------------------------------------------------------------------*/
;*    hopjs-forward-sexp ...                                           */
;*---------------------------------------------------------------------*/
(defun hopjs-forward-sexp ()
  (if (hopjs-opening-tag-p (point))
      (if (looking-at hopjs-re-standalone-tag)
	  (goto-char (match-end 0))
	(let ((otag (hopjs-find-closing-tag (+ 1 (match-end 0)))))
	  (if otag
	      (goto-char (match-end 0))
	    (let ((forward-sexp-function nil))
	      (forward-sexp 1)))))
    (let ((forward-sexp-function nil))
      (forward-sexp 1))))

;*---------------------------------------------------------------------*/
;*    hopjs-backward-sexp ...                                          */
;*---------------------------------------------------------------------*/
(defun hopjs-backward-sexp ()
  (if (hopjs-closing-tag-p (1- (point)))
      (let ((otag (hopjs-find-opening-tag (match-beginning 0))))
	(if otag
	    (goto-char (match-beginning 0))
	  (let ((backward-sexp-function nil))
	    (forward-sexp -1))))
    (let ((forward-sexp-function nil))
      (forward-sexp -1))))

;*---------------------------------------------------------------------*/
;*    forward-sexp-function ...                                        */
;*---------------------------------------------------------------------*/
(make-variable-buffer-local 'forward-sexp-function)

(setq forward-sexp-function
      #'(lambda (arg)
	  (interactive)
	  (cond
	   ((= arg 1)
	    (hopjs-forward-sexp))
	   ((= arg -1)
	    (hopjs-backward-sexp))
	   (t 
	    (let ((forward-sexp-function nil))
	      (forward-sexp arg))))))

;*---------------------------------------------------------------------*/
;*    hopjs-doc-index-find ...                                         */
;*---------------------------------------------------------------------*/
(defun hopjs-doc-index-find (word table)
  (when (> (length word) 0)
    (let* ((key (aref word 0))
	   (idx (cond
		 ((and (>= key ?a) (<= key ?z)) (- key ?a))
		 ((and (>= key ?A) (<= key ?Z)) (- key ?A))
		 (t 26)))
	   (bucket (aref table idx)))
      (assoc word bucket))))

;*---------------------------------------------------------------------*/
;*    hopjs-doc-word ...                                               */
;*---------------------------------------------------------------------*/
(defvar hopjs-doc-point 1)
(defvar hopjs-doc-url nil)
(defvar hopjs-doc-beg nil)
(defvar hopjs-doc-end nil)

(make-variable-buffer-local 'hopjs-doc-point)
(make-variable-buffer-local 'hopjs-doc-url)
(make-variable-buffer-local 'hopjs-doc-beg)
(make-variable-buffer-local 'hopjs-doc-end)

;*---------------------------------------------------------------------*/
;*    backward-hopjs-expr ...                                          */
;*---------------------------------------------------------------------*/
(defun backward-hopjs-expr ()
  (when (> (point) (point-min))
    (backward-word)
    (case (char-after (- (point) 1))
      ((?.) (backward-hopjs-expr))
      ((?<) (goto-char (- (point) 1)) (point))
      (t (point)))))

;*---------------------------------------------------------------------*/
;*    hopjs-doc-at-point ...                                           */
;*---------------------------------------------------------------------*/
(defun hopjs-doc-at-point (pos)
  (interactive "d")
  (save-excursion
    (unless (hopjs-in-string-comment-p (point))
      (let* ((beg (if (eq (char-after (1- (point))) ?<)
		      (point)
		    (progn (backward-word) (point))))
	     (end (progn (forward-word 1) (point)))
	     (word (buffer-substring-no-properties beg end))
	     (y "*"))
	(when (>= end pos)
	  (cond
	   ((progn (backward-hopjs-expr) (looking-at hopjs-re-open-tag))
	    ;; a tag
	    (setq y "tag")
	    (setq word (downcase word)))
	   ((and (> (point) 2)
		 (progn (goto-char (- beg 2)) (looking-at hopjs-re-close-tag)))
	    ;; a tag
	    (setq y "tag")
	    (setq word (downcase word)))
	   ((progn (goto-char (1+ end)) (looking-at "[ \t\n]*[=,;})]"))
	    (setq y "parameter"))
	   ((progn (goto-char (- beg 4)) (looking-at "new "))
	    ;; a constructor
	    (setq y "constructor")))
	  (cond
	   ((string-equal word "")
	    (hopjs-undoc))
	   ((not (= (point) hopjs-doc-point))
	    (setq hopjs-doc-point (point))
	    (hopjs-undoc)
	    (setq hopjs-doc-beg beg)
	    (setq hopjs-doc-end end)
	    (let ((entry (hopjs-doc-index-find word hopjs-doc-index-table)))
	      (when entry
		(let ((type (assq 'type (cdr entry))))
		  (if (or (not (consp type))
			  (string-equal (cdr type) y)
			  (and (not (string-equal (cdr type) "tag"))
			       (string-equal y "*")))
		      (let* ((url (assq 'url (cdr entry)))
			     (proto (assq 'proto (cdr entry)))
		     
			     (tooltip (replace-regexp-in-string
				       "&gt;" ">"
				       (replace-regexp-in-string
					"&lt;" "<" (cdr proto)))))
			(when url
			  (message tooltip)
			  (setq hopjs-doc-url (cdr url))
			  (let ((mod (buffer-modified-p)))
			    (put-text-properties beg end
						 'keymap hopjs-tooltip-map
						 'face 'highlight
						 'help-echo tooltip)
			    (set-buffer-modified-p mod)))))))))))))))

;*---------------------------------------------------------------------*/
;*    put-text-properties ...                                          */
;*---------------------------------------------------------------------*/
(defun put-text-properties (start end &rest props)
  (let ((ov (make-overlay start end nil t nil))
	(mod (buffer-modified-p)))
    (while (consp props)
      (overlay-put ov (car props) (cadr props))
      (setq props (cddr props)))
    (set-buffer-modified-p mod)))

;*---------------------------------------------------------------------*/
;*    remove-text-property ...                                         */
;*---------------------------------------------------------------------*/
(defun remove-text-property (start end prop &optional object)
  (let ((l (overlays-in start end)))
    (while (consp l)
      (let ((o (car l)))
	(setq l (cdr l))
	(if (overlayp o)
	    (if (overlay-get o prop)
		(delete-overlay o)))))))

;*---------------------------------------------------------------------*/
;*    hopjs-undoc ...                                                  */
;*---------------------------------------------------------------------*/
(defun hopjs-undoc ()
  (when hopjs-doc-beg
    (let ((mod (buffer-modified-p))
	  (l '(help-echo mouse-face keymap)))
      (while (consp l)
	(remove-text-property hopjs-doc-beg hopjs-doc-end (car l))
	(setq l (cdr l)))
      (set-buffer-modified-p mod))))

;*---------------------------------------------------------------------*/
;*    hopjs-doc-entry ...                                              */
;*---------------------------------------------------------------------*/
(defun hopjs-doc-entry (point)
  (interactive "d")
  (let* ((url (cond
	       ((posix-string-match "http[s]?://" hopjs-doc-url)
		hopjs-doc-url)
	       ((eq (aref hopjs-doc-url 0) ?/)
		(format "file://%s" hopjs-doc-url))
	       (t 
		(format "file://%s/%s" hopjs-doc-dir hopjs-doc-url))))
	 (cmd (concat hopjs-navigator " " url)))
    (message cmd)
    (start-process "system" nil "sh" "-c" cmd)))

;*---------------------------------------------------------------------*/
;*    init                                                             */
;*---------------------------------------------------------------------*/
;; (autoload 'hopjs-mode-hook "hopjs" "Hop.js javascript mode hook" t)
;; (add-hook 'js-mode-hook 'hopjs-mode-hook)
